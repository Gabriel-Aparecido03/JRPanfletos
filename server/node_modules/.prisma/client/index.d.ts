
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model AuthorizationOfDistribution
 * 
 */
export type AuthorizationOfDistribution = $Result.DefaultSelection<Prisma.$AuthorizationOfDistributionPayload>
/**
 * Model AuthorizationsHasSectors
 * 
 */
export type AuthorizationsHasSectors = $Result.DefaultSelection<Prisma.$AuthorizationsHasSectorsPayload>
/**
 * Model ReportsDistributions
 * 
 */
export type ReportsDistributions = $Result.DefaultSelection<Prisma.$ReportsDistributionsPayload>
/**
 * Model Sector
 * 
 */
export type Sector = $Result.DefaultSelection<Prisma.$SectorPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  COMMOM: 'COMMOM'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs>;

  /**
   * `prisma.authorizationOfDistribution`: Exposes CRUD operations for the **AuthorizationOfDistribution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthorizationOfDistributions
    * const authorizationOfDistributions = await prisma.authorizationOfDistribution.findMany()
    * ```
    */
  get authorizationOfDistribution(): Prisma.AuthorizationOfDistributionDelegate<ExtArgs>;

  /**
   * `prisma.authorizationsHasSectors`: Exposes CRUD operations for the **AuthorizationsHasSectors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthorizationsHasSectors
    * const authorizationsHasSectors = await prisma.authorizationsHasSectors.findMany()
    * ```
    */
  get authorizationsHasSectors(): Prisma.AuthorizationsHasSectorsDelegate<ExtArgs>;

  /**
   * `prisma.reportsDistributions`: Exposes CRUD operations for the **ReportsDistributions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportsDistributions
    * const reportsDistributions = await prisma.reportsDistributions.findMany()
    * ```
    */
  get reportsDistributions(): Prisma.ReportsDistributionsDelegate<ExtArgs>;

  /**
   * `prisma.sector`: Exposes CRUD operations for the **Sector** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sectors
    * const sectors = await prisma.sector.findMany()
    * ```
    */
  get sector(): Prisma.SectorDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Client: 'Client',
    AuthorizationOfDistribution: 'AuthorizationOfDistribution',
    AuthorizationsHasSectors: 'AuthorizationsHasSectors',
    ReportsDistributions: 'ReportsDistributions',
    Sector: 'Sector'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'client' | 'authorizationOfDistribution' | 'authorizationsHasSectors' | 'reportsDistributions' | 'sector'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      AuthorizationOfDistribution: {
        payload: Prisma.$AuthorizationOfDistributionPayload<ExtArgs>
        fields: Prisma.AuthorizationOfDistributionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthorizationOfDistributionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationOfDistributionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthorizationOfDistributionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationOfDistributionPayload>
          }
          findFirst: {
            args: Prisma.AuthorizationOfDistributionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationOfDistributionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthorizationOfDistributionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationOfDistributionPayload>
          }
          findMany: {
            args: Prisma.AuthorizationOfDistributionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationOfDistributionPayload>[]
          }
          create: {
            args: Prisma.AuthorizationOfDistributionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationOfDistributionPayload>
          }
          createMany: {
            args: Prisma.AuthorizationOfDistributionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AuthorizationOfDistributionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationOfDistributionPayload>
          }
          update: {
            args: Prisma.AuthorizationOfDistributionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationOfDistributionPayload>
          }
          deleteMany: {
            args: Prisma.AuthorizationOfDistributionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuthorizationOfDistributionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuthorizationOfDistributionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationOfDistributionPayload>
          }
          aggregate: {
            args: Prisma.AuthorizationOfDistributionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuthorizationOfDistribution>
          }
          groupBy: {
            args: Prisma.AuthorizationOfDistributionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuthorizationOfDistributionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthorizationOfDistributionCountArgs<ExtArgs>,
            result: $Utils.Optional<AuthorizationOfDistributionCountAggregateOutputType> | number
          }
        }
      }
      AuthorizationsHasSectors: {
        payload: Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>
        fields: Prisma.AuthorizationsHasSectorsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthorizationsHasSectorsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationsHasSectorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthorizationsHasSectorsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationsHasSectorsPayload>
          }
          findFirst: {
            args: Prisma.AuthorizationsHasSectorsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationsHasSectorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthorizationsHasSectorsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationsHasSectorsPayload>
          }
          findMany: {
            args: Prisma.AuthorizationsHasSectorsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationsHasSectorsPayload>[]
          }
          create: {
            args: Prisma.AuthorizationsHasSectorsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationsHasSectorsPayload>
          }
          createMany: {
            args: Prisma.AuthorizationsHasSectorsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AuthorizationsHasSectorsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationsHasSectorsPayload>
          }
          update: {
            args: Prisma.AuthorizationsHasSectorsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationsHasSectorsPayload>
          }
          deleteMany: {
            args: Prisma.AuthorizationsHasSectorsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuthorizationsHasSectorsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuthorizationsHasSectorsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorizationsHasSectorsPayload>
          }
          aggregate: {
            args: Prisma.AuthorizationsHasSectorsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuthorizationsHasSectors>
          }
          groupBy: {
            args: Prisma.AuthorizationsHasSectorsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuthorizationsHasSectorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthorizationsHasSectorsCountArgs<ExtArgs>,
            result: $Utils.Optional<AuthorizationsHasSectorsCountAggregateOutputType> | number
          }
        }
      }
      ReportsDistributions: {
        payload: Prisma.$ReportsDistributionsPayload<ExtArgs>
        fields: Prisma.ReportsDistributionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportsDistributionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportsDistributionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportsDistributionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportsDistributionsPayload>
          }
          findFirst: {
            args: Prisma.ReportsDistributionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportsDistributionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportsDistributionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportsDistributionsPayload>
          }
          findMany: {
            args: Prisma.ReportsDistributionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportsDistributionsPayload>[]
          }
          create: {
            args: Prisma.ReportsDistributionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportsDistributionsPayload>
          }
          createMany: {
            args: Prisma.ReportsDistributionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReportsDistributionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportsDistributionsPayload>
          }
          update: {
            args: Prisma.ReportsDistributionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportsDistributionsPayload>
          }
          deleteMany: {
            args: Prisma.ReportsDistributionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReportsDistributionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReportsDistributionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportsDistributionsPayload>
          }
          aggregate: {
            args: Prisma.ReportsDistributionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReportsDistributions>
          }
          groupBy: {
            args: Prisma.ReportsDistributionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReportsDistributionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportsDistributionsCountArgs<ExtArgs>,
            result: $Utils.Optional<ReportsDistributionsCountAggregateOutputType> | number
          }
        }
      }
      Sector: {
        payload: Prisma.$SectorPayload<ExtArgs>
        fields: Prisma.SectorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SectorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SectorPayload>
          }
          findFirst: {
            args: Prisma.SectorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SectorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SectorPayload>
          }
          findMany: {
            args: Prisma.SectorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SectorPayload>[]
          }
          create: {
            args: Prisma.SectorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SectorPayload>
          }
          createMany: {
            args: Prisma.SectorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SectorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SectorPayload>
          }
          update: {
            args: Prisma.SectorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SectorPayload>
          }
          deleteMany: {
            args: Prisma.SectorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SectorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SectorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SectorPayload>
          }
          aggregate: {
            args: Prisma.SectorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSector>
          }
          groupBy: {
            args: Prisma.SectorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SectorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectorCountArgs<ExtArgs>,
            result: $Utils.Optional<SectorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Client: number
    DistribuitionsAuthorizations: number
    AuthorizationsHasSectors: number
    ReportsDistributions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Client?: boolean | UserCountOutputTypeCountClientArgs
    DistribuitionsAuthorizations?: boolean | UserCountOutputTypeCountDistribuitionsAuthorizationsArgs
    AuthorizationsHasSectors?: boolean | UserCountOutputTypeCountAuthorizationsHasSectorsArgs
    ReportsDistributions?: boolean | UserCountOutputTypeCountReportsDistributionsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDistribuitionsAuthorizationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthorizationOfDistributionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthorizationsHasSectorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthorizationsHasSectorsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsDistributionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReportsDistributionsWhereInput
  }



  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    DistributionAuthorization: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    DistributionAuthorization?: boolean | ClientCountOutputTypeCountDistributionAuthorizationArgs
  }

  // Custom InputTypes

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountDistributionAuthorizationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthorizationOfDistributionWhereInput
  }



  /**
   * Count Type AuthorizationOfDistributionCountOutputType
   */

  export type AuthorizationOfDistributionCountOutputType = {
    AuthorizationsHasSectors: number
  }

  export type AuthorizationOfDistributionCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    AuthorizationsHasSectors?: boolean | AuthorizationOfDistributionCountOutputTypeCountAuthorizationsHasSectorsArgs
  }

  // Custom InputTypes

  /**
   * AuthorizationOfDistributionCountOutputType without action
   */
  export type AuthorizationOfDistributionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistributionCountOutputType
     */
    select?: AuthorizationOfDistributionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AuthorizationOfDistributionCountOutputType without action
   */
  export type AuthorizationOfDistributionCountOutputTypeCountAuthorizationsHasSectorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthorizationsHasSectorsWhereInput
  }



  /**
   * Count Type SectorCountOutputType
   */

  export type SectorCountOutputType = {
    AuthorizationsHasSectors: number
  }

  export type SectorCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    AuthorizationsHasSectors?: boolean | SectorCountOutputTypeCountAuthorizationsHasSectorsArgs
  }

  // Custom InputTypes

  /**
   * SectorCountOutputType without action
   */
  export type SectorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectorCountOutputType
     */
    select?: SectorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SectorCountOutputType without action
   */
  export type SectorCountOutputTypeCountAuthorizationsHasSectorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthorizationsHasSectorsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    cpf_number: string | null
    work_card_number: string | null
    office: string | null
    email: string | null
    password_hash: string | null
    created_at: Date | null
    updated_at: Date | null
    role: $Enums.Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    cpf_number: string | null
    work_card_number: string | null
    office: string | null
    email: string | null
    password_hash: string | null
    created_at: Date | null
    updated_at: Date | null
    role: $Enums.Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    cpf_number: number
    work_card_number: number
    office: number
    email: number
    password_hash: number
    created_at: number
    updated_at: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    cpf_number?: true
    work_card_number?: true
    office?: true
    email?: true
    password_hash?: true
    created_at?: true
    updated_at?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    cpf_number?: true
    work_card_number?: true
    office?: true
    email?: true
    password_hash?: true
    created_at?: true
    updated_at?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    cpf_number?: true
    work_card_number?: true
    office?: true
    email?: true
    password_hash?: true
    created_at?: true
    updated_at?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at: Date
    updated_at: Date | null
    role: $Enums.Role
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cpf_number?: boolean
    work_card_number?: boolean
    office?: boolean
    email?: boolean
    password_hash?: boolean
    created_at?: boolean
    updated_at?: boolean
    role?: boolean
    Client?: boolean | User$ClientArgs<ExtArgs>
    DistribuitionsAuthorizations?: boolean | User$DistribuitionsAuthorizationsArgs<ExtArgs>
    AuthorizationsHasSectors?: boolean | User$AuthorizationsHasSectorsArgs<ExtArgs>
    ReportsDistributions?: boolean | User$ReportsDistributionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    cpf_number?: boolean
    work_card_number?: boolean
    office?: boolean
    email?: boolean
    password_hash?: boolean
    created_at?: boolean
    updated_at?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Client?: boolean | User$ClientArgs<ExtArgs>
    DistribuitionsAuthorizations?: boolean | User$DistribuitionsAuthorizationsArgs<ExtArgs>
    AuthorizationsHasSectors?: boolean | User$AuthorizationsHasSectorsArgs<ExtArgs>
    ReportsDistributions?: boolean | User$ReportsDistributionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Client: Prisma.$ClientPayload<ExtArgs>[]
      DistribuitionsAuthorizations: Prisma.$AuthorizationOfDistributionPayload<ExtArgs>[]
      AuthorizationsHasSectors: Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>[]
      ReportsDistributions: Prisma.$ReportsDistributionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      cpf_number: string
      work_card_number: string
      office: string
      email: string
      password_hash: string
      created_at: Date
      updated_at: Date | null
      role: $Enums.Role
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Client<T extends User$ClientArgs<ExtArgs> = {}>(args?: Subset<T, User$ClientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findMany'> | Null>;

    DistribuitionsAuthorizations<T extends User$DistribuitionsAuthorizationsArgs<ExtArgs> = {}>(args?: Subset<T, User$DistribuitionsAuthorizationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'findMany'> | Null>;

    AuthorizationsHasSectors<T extends User$AuthorizationsHasSectorsArgs<ExtArgs> = {}>(args?: Subset<T, User$AuthorizationsHasSectorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'findMany'> | Null>;

    ReportsDistributions<T extends User$ReportsDistributionsArgs<ExtArgs> = {}>(args?: Subset<T, User$ReportsDistributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly cpf_number: FieldRef<"User", 'String'>
    readonly work_card_number: FieldRef<"User", 'String'>
    readonly office: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password_hash: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'Role'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Client
   */
  export type User$ClientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * User.DistribuitionsAuthorizations
   */
  export type User$DistribuitionsAuthorizationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    where?: AuthorizationOfDistributionWhereInput
    orderBy?: AuthorizationOfDistributionOrderByWithRelationInput | AuthorizationOfDistributionOrderByWithRelationInput[]
    cursor?: AuthorizationOfDistributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthorizationOfDistributionScalarFieldEnum | AuthorizationOfDistributionScalarFieldEnum[]
  }


  /**
   * User.AuthorizationsHasSectors
   */
  export type User$AuthorizationsHasSectorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    where?: AuthorizationsHasSectorsWhereInput
    orderBy?: AuthorizationsHasSectorsOrderByWithRelationInput | AuthorizationsHasSectorsOrderByWithRelationInput[]
    cursor?: AuthorizationsHasSectorsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthorizationsHasSectorsScalarFieldEnum | AuthorizationsHasSectorsScalarFieldEnum[]
  }


  /**
   * User.ReportsDistributions
   */
  export type User$ReportsDistributionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    where?: ReportsDistributionsWhereInput
    orderBy?: ReportsDistributionsOrderByWithRelationInput | ReportsDistributionsOrderByWithRelationInput[]
    cursor?: ReportsDistributionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportsDistributionsScalarFieldEnum | ReportsDistributionsScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientMinAggregateOutputType = {
    id: string | null
    socialName: string | null
    email: string | null
    phone: string | null
    cnpj: string | null
    user_created_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ClientMaxAggregateOutputType = {
    id: string | null
    socialName: string | null
    email: string | null
    phone: string | null
    cnpj: string | null
    user_created_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    socialName: number
    email: number
    phone: number
    cnpj: number
    user_created_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ClientMinAggregateInputType = {
    id?: true
    socialName?: true
    email?: true
    phone?: true
    cnpj?: true
    user_created_id?: true
    created_at?: true
    updated_at?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    socialName?: true
    email?: true
    phone?: true
    cnpj?: true
    user_created_id?: true
    created_at?: true
    updated_at?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    socialName?: true
    email?: true
    phone?: true
    cnpj?: true
    user_created_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: string
    socialName: string
    email: string
    phone: string
    cnpj: string
    user_created_id: string
    created_at: Date
    updated_at: Date | null
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    socialName?: boolean
    email?: boolean
    phone?: boolean
    cnpj?: boolean
    user_created_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    DistributionAuthorization?: boolean | Client$DistributionAuthorizationArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    socialName?: boolean
    email?: boolean
    phone?: boolean
    cnpj?: boolean
    user_created_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ClientInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    DistributionAuthorization?: boolean | Client$DistributionAuthorizationArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ClientPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      DistributionAuthorization: Prisma.$AuthorizationOfDistributionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      socialName: string
      email: string
      phone: string
      cnpj: string
      user_created_id: string
      created_at: Date
      updated_at: Date | null
    }, ExtArgs["result"]["client"]>
    composites: {}
  }


  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClientFindManyArgs, 'select' | 'include'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Client that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
    **/
    create<T extends ClientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientCreateArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clients.
     *     @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const client = await prisma.client.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
    **/
    delete<T extends ClientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
    **/
    upsert<T extends ClientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    DistributionAuthorization<T extends Client$DistributionAuthorizationArgs<ExtArgs> = {}>(args?: Subset<T, Client$DistributionAuthorizationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Client model
   */ 
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'String'>
    readonly socialName: FieldRef<"Client", 'String'>
    readonly email: FieldRef<"Client", 'String'>
    readonly phone: FieldRef<"Client", 'String'>
    readonly cnpj: FieldRef<"Client", 'String'>
    readonly user_created_id: FieldRef<"Client", 'String'>
    readonly created_at: FieldRef<"Client", 'DateTime'>
    readonly updated_at: FieldRef<"Client", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }


  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
  }


  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }


  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
  }


  /**
   * Client.DistributionAuthorization
   */
  export type Client$DistributionAuthorizationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    where?: AuthorizationOfDistributionWhereInput
    orderBy?: AuthorizationOfDistributionOrderByWithRelationInput | AuthorizationOfDistributionOrderByWithRelationInput[]
    cursor?: AuthorizationOfDistributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthorizationOfDistributionScalarFieldEnum | AuthorizationOfDistributionScalarFieldEnum[]
  }


  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
  }



  /**
   * Model AuthorizationOfDistribution
   */

  export type AggregateAuthorizationOfDistribution = {
    _count: AuthorizationOfDistributionCountAggregateOutputType | null
    _avg: AuthorizationOfDistributionAvgAggregateOutputType | null
    _sum: AuthorizationOfDistributionSumAggregateOutputType | null
    _min: AuthorizationOfDistributionMinAggregateOutputType | null
    _max: AuthorizationOfDistributionMaxAggregateOutputType | null
  }

  export type AuthorizationOfDistributionAvgAggregateOutputType = {
    value_of_thousand_in_cents: number | null
  }

  export type AuthorizationOfDistributionSumAggregateOutputType = {
    value_of_thousand_in_cents: number | null
  }

  export type AuthorizationOfDistributionMinAggregateOutputType = {
    id: string | null
    creation_user_id: string | null
    client_id: string | null
    created_at: Date | null
    value_of_thousand_in_cents: number | null
  }

  export type AuthorizationOfDistributionMaxAggregateOutputType = {
    id: string | null
    creation_user_id: string | null
    client_id: string | null
    created_at: Date | null
    value_of_thousand_in_cents: number | null
  }

  export type AuthorizationOfDistributionCountAggregateOutputType = {
    id: number
    creation_user_id: number
    client_id: number
    created_at: number
    value_of_thousand_in_cents: number
    _all: number
  }


  export type AuthorizationOfDistributionAvgAggregateInputType = {
    value_of_thousand_in_cents?: true
  }

  export type AuthorizationOfDistributionSumAggregateInputType = {
    value_of_thousand_in_cents?: true
  }

  export type AuthorizationOfDistributionMinAggregateInputType = {
    id?: true
    creation_user_id?: true
    client_id?: true
    created_at?: true
    value_of_thousand_in_cents?: true
  }

  export type AuthorizationOfDistributionMaxAggregateInputType = {
    id?: true
    creation_user_id?: true
    client_id?: true
    created_at?: true
    value_of_thousand_in_cents?: true
  }

  export type AuthorizationOfDistributionCountAggregateInputType = {
    id?: true
    creation_user_id?: true
    client_id?: true
    created_at?: true
    value_of_thousand_in_cents?: true
    _all?: true
  }

  export type AuthorizationOfDistributionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthorizationOfDistribution to aggregate.
     */
    where?: AuthorizationOfDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthorizationOfDistributions to fetch.
     */
    orderBy?: AuthorizationOfDistributionOrderByWithRelationInput | AuthorizationOfDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthorizationOfDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthorizationOfDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthorizationOfDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuthorizationOfDistributions
    **/
    _count?: true | AuthorizationOfDistributionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthorizationOfDistributionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthorizationOfDistributionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthorizationOfDistributionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthorizationOfDistributionMaxAggregateInputType
  }

  export type GetAuthorizationOfDistributionAggregateType<T extends AuthorizationOfDistributionAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthorizationOfDistribution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthorizationOfDistribution[P]>
      : GetScalarType<T[P], AggregateAuthorizationOfDistribution[P]>
  }




  export type AuthorizationOfDistributionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthorizationOfDistributionWhereInput
    orderBy?: AuthorizationOfDistributionOrderByWithAggregationInput | AuthorizationOfDistributionOrderByWithAggregationInput[]
    by: AuthorizationOfDistributionScalarFieldEnum[] | AuthorizationOfDistributionScalarFieldEnum
    having?: AuthorizationOfDistributionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthorizationOfDistributionCountAggregateInputType | true
    _avg?: AuthorizationOfDistributionAvgAggregateInputType
    _sum?: AuthorizationOfDistributionSumAggregateInputType
    _min?: AuthorizationOfDistributionMinAggregateInputType
    _max?: AuthorizationOfDistributionMaxAggregateInputType
  }

  export type AuthorizationOfDistributionGroupByOutputType = {
    id: string
    creation_user_id: string
    client_id: string
    created_at: Date
    value_of_thousand_in_cents: number
    _count: AuthorizationOfDistributionCountAggregateOutputType | null
    _avg: AuthorizationOfDistributionAvgAggregateOutputType | null
    _sum: AuthorizationOfDistributionSumAggregateOutputType | null
    _min: AuthorizationOfDistributionMinAggregateOutputType | null
    _max: AuthorizationOfDistributionMaxAggregateOutputType | null
  }

  type GetAuthorizationOfDistributionGroupByPayload<T extends AuthorizationOfDistributionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthorizationOfDistributionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthorizationOfDistributionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthorizationOfDistributionGroupByOutputType[P]>
            : GetScalarType<T[P], AuthorizationOfDistributionGroupByOutputType[P]>
        }
      >
    >


  export type AuthorizationOfDistributionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creation_user_id?: boolean
    client_id?: boolean
    created_at?: boolean
    value_of_thousand_in_cents?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Client?: boolean | ClientDefaultArgs<ExtArgs>
    AuthorizationsHasSectors?: boolean | AuthorizationOfDistribution$AuthorizationsHasSectorsArgs<ExtArgs>
    ReportsDistributions?: boolean | AuthorizationOfDistribution$ReportsDistributionsArgs<ExtArgs>
    _count?: boolean | AuthorizationOfDistributionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["authorizationOfDistribution"]>

  export type AuthorizationOfDistributionSelectScalar = {
    id?: boolean
    creation_user_id?: boolean
    client_id?: boolean
    created_at?: boolean
    value_of_thousand_in_cents?: boolean
  }

  export type AuthorizationOfDistributionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Client?: boolean | ClientDefaultArgs<ExtArgs>
    AuthorizationsHasSectors?: boolean | AuthorizationOfDistribution$AuthorizationsHasSectorsArgs<ExtArgs>
    ReportsDistributions?: boolean | AuthorizationOfDistribution$ReportsDistributionsArgs<ExtArgs>
    _count?: boolean | AuthorizationOfDistributionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AuthorizationOfDistributionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "AuthorizationOfDistribution"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Client: Prisma.$ClientPayload<ExtArgs>
      AuthorizationsHasSectors: Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>[]
      ReportsDistributions: Prisma.$ReportsDistributionsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: string
      creation_user_id: string
      client_id: string
      created_at: Date
      value_of_thousand_in_cents: number
    }, ExtArgs["result"]["authorizationOfDistribution"]>
    composites: {}
  }


  type AuthorizationOfDistributionGetPayload<S extends boolean | null | undefined | AuthorizationOfDistributionDefaultArgs> = $Result.GetResult<Prisma.$AuthorizationOfDistributionPayload, S>

  type AuthorizationOfDistributionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AuthorizationOfDistributionFindManyArgs, 'select' | 'include'> & {
      select?: AuthorizationOfDistributionCountAggregateInputType | true
    }

  export interface AuthorizationOfDistributionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuthorizationOfDistribution'], meta: { name: 'AuthorizationOfDistribution' } }
    /**
     * Find zero or one AuthorizationOfDistribution that matches the filter.
     * @param {AuthorizationOfDistributionFindUniqueArgs} args - Arguments to find a AuthorizationOfDistribution
     * @example
     * // Get one AuthorizationOfDistribution
     * const authorizationOfDistribution = await prisma.authorizationOfDistribution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuthorizationOfDistributionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationOfDistributionFindUniqueArgs<ExtArgs>>
    ): Prisma__AuthorizationOfDistributionClient<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AuthorizationOfDistribution that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuthorizationOfDistributionFindUniqueOrThrowArgs} args - Arguments to find a AuthorizationOfDistribution
     * @example
     * // Get one AuthorizationOfDistribution
     * const authorizationOfDistribution = await prisma.authorizationOfDistribution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuthorizationOfDistributionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationOfDistributionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuthorizationOfDistributionClient<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AuthorizationOfDistribution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationOfDistributionFindFirstArgs} args - Arguments to find a AuthorizationOfDistribution
     * @example
     * // Get one AuthorizationOfDistribution
     * const authorizationOfDistribution = await prisma.authorizationOfDistribution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuthorizationOfDistributionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationOfDistributionFindFirstArgs<ExtArgs>>
    ): Prisma__AuthorizationOfDistributionClient<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AuthorizationOfDistribution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationOfDistributionFindFirstOrThrowArgs} args - Arguments to find a AuthorizationOfDistribution
     * @example
     * // Get one AuthorizationOfDistribution
     * const authorizationOfDistribution = await prisma.authorizationOfDistribution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuthorizationOfDistributionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationOfDistributionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuthorizationOfDistributionClient<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AuthorizationOfDistributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationOfDistributionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthorizationOfDistributions
     * const authorizationOfDistributions = await prisma.authorizationOfDistribution.findMany()
     * 
     * // Get first 10 AuthorizationOfDistributions
     * const authorizationOfDistributions = await prisma.authorizationOfDistribution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorizationOfDistributionWithIdOnly = await prisma.authorizationOfDistribution.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AuthorizationOfDistributionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationOfDistributionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AuthorizationOfDistribution.
     * @param {AuthorizationOfDistributionCreateArgs} args - Arguments to create a AuthorizationOfDistribution.
     * @example
     * // Create one AuthorizationOfDistribution
     * const AuthorizationOfDistribution = await prisma.authorizationOfDistribution.create({
     *   data: {
     *     // ... data to create a AuthorizationOfDistribution
     *   }
     * })
     * 
    **/
    create<T extends AuthorizationOfDistributionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationOfDistributionCreateArgs<ExtArgs>>
    ): Prisma__AuthorizationOfDistributionClient<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AuthorizationOfDistributions.
     *     @param {AuthorizationOfDistributionCreateManyArgs} args - Arguments to create many AuthorizationOfDistributions.
     *     @example
     *     // Create many AuthorizationOfDistributions
     *     const authorizationOfDistribution = await prisma.authorizationOfDistribution.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuthorizationOfDistributionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationOfDistributionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuthorizationOfDistribution.
     * @param {AuthorizationOfDistributionDeleteArgs} args - Arguments to delete one AuthorizationOfDistribution.
     * @example
     * // Delete one AuthorizationOfDistribution
     * const AuthorizationOfDistribution = await prisma.authorizationOfDistribution.delete({
     *   where: {
     *     // ... filter to delete one AuthorizationOfDistribution
     *   }
     * })
     * 
    **/
    delete<T extends AuthorizationOfDistributionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationOfDistributionDeleteArgs<ExtArgs>>
    ): Prisma__AuthorizationOfDistributionClient<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AuthorizationOfDistribution.
     * @param {AuthorizationOfDistributionUpdateArgs} args - Arguments to update one AuthorizationOfDistribution.
     * @example
     * // Update one AuthorizationOfDistribution
     * const authorizationOfDistribution = await prisma.authorizationOfDistribution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuthorizationOfDistributionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationOfDistributionUpdateArgs<ExtArgs>>
    ): Prisma__AuthorizationOfDistributionClient<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AuthorizationOfDistributions.
     * @param {AuthorizationOfDistributionDeleteManyArgs} args - Arguments to filter AuthorizationOfDistributions to delete.
     * @example
     * // Delete a few AuthorizationOfDistributions
     * const { count } = await prisma.authorizationOfDistribution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuthorizationOfDistributionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationOfDistributionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthorizationOfDistributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationOfDistributionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthorizationOfDistributions
     * const authorizationOfDistribution = await prisma.authorizationOfDistribution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuthorizationOfDistributionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationOfDistributionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuthorizationOfDistribution.
     * @param {AuthorizationOfDistributionUpsertArgs} args - Arguments to update or create a AuthorizationOfDistribution.
     * @example
     * // Update or create a AuthorizationOfDistribution
     * const authorizationOfDistribution = await prisma.authorizationOfDistribution.upsert({
     *   create: {
     *     // ... data to create a AuthorizationOfDistribution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthorizationOfDistribution we want to update
     *   }
     * })
    **/
    upsert<T extends AuthorizationOfDistributionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationOfDistributionUpsertArgs<ExtArgs>>
    ): Prisma__AuthorizationOfDistributionClient<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AuthorizationOfDistributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationOfDistributionCountArgs} args - Arguments to filter AuthorizationOfDistributions to count.
     * @example
     * // Count the number of AuthorizationOfDistributions
     * const count = await prisma.authorizationOfDistribution.count({
     *   where: {
     *     // ... the filter for the AuthorizationOfDistributions we want to count
     *   }
     * })
    **/
    count<T extends AuthorizationOfDistributionCountArgs>(
      args?: Subset<T, AuthorizationOfDistributionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorizationOfDistributionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthorizationOfDistribution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationOfDistributionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorizationOfDistributionAggregateArgs>(args: Subset<T, AuthorizationOfDistributionAggregateArgs>): Prisma.PrismaPromise<GetAuthorizationOfDistributionAggregateType<T>>

    /**
     * Group by AuthorizationOfDistribution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationOfDistributionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthorizationOfDistributionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthorizationOfDistributionGroupByArgs['orderBy'] }
        : { orderBy?: AuthorizationOfDistributionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthorizationOfDistributionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorizationOfDistributionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuthorizationOfDistribution model
   */
  readonly fields: AuthorizationOfDistributionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuthorizationOfDistribution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthorizationOfDistributionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    AuthorizationsHasSectors<T extends AuthorizationOfDistribution$AuthorizationsHasSectorsArgs<ExtArgs> = {}>(args?: Subset<T, AuthorizationOfDistribution$AuthorizationsHasSectorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'findMany'> | Null>;

    ReportsDistributions<T extends AuthorizationOfDistribution$ReportsDistributionsArgs<ExtArgs> = {}>(args?: Subset<T, AuthorizationOfDistribution$ReportsDistributionsArgs<ExtArgs>>): Prisma__ReportsDistributionsClient<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AuthorizationOfDistribution model
   */ 
  interface AuthorizationOfDistributionFieldRefs {
    readonly id: FieldRef<"AuthorizationOfDistribution", 'String'>
    readonly creation_user_id: FieldRef<"AuthorizationOfDistribution", 'String'>
    readonly client_id: FieldRef<"AuthorizationOfDistribution", 'String'>
    readonly created_at: FieldRef<"AuthorizationOfDistribution", 'DateTime'>
    readonly value_of_thousand_in_cents: FieldRef<"AuthorizationOfDistribution", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * AuthorizationOfDistribution findUnique
   */
  export type AuthorizationOfDistributionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    /**
     * Filter, which AuthorizationOfDistribution to fetch.
     */
    where: AuthorizationOfDistributionWhereUniqueInput
  }


  /**
   * AuthorizationOfDistribution findUniqueOrThrow
   */
  export type AuthorizationOfDistributionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    /**
     * Filter, which AuthorizationOfDistribution to fetch.
     */
    where: AuthorizationOfDistributionWhereUniqueInput
  }


  /**
   * AuthorizationOfDistribution findFirst
   */
  export type AuthorizationOfDistributionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    /**
     * Filter, which AuthorizationOfDistribution to fetch.
     */
    where?: AuthorizationOfDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthorizationOfDistributions to fetch.
     */
    orderBy?: AuthorizationOfDistributionOrderByWithRelationInput | AuthorizationOfDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthorizationOfDistributions.
     */
    cursor?: AuthorizationOfDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthorizationOfDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthorizationOfDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthorizationOfDistributions.
     */
    distinct?: AuthorizationOfDistributionScalarFieldEnum | AuthorizationOfDistributionScalarFieldEnum[]
  }


  /**
   * AuthorizationOfDistribution findFirstOrThrow
   */
  export type AuthorizationOfDistributionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    /**
     * Filter, which AuthorizationOfDistribution to fetch.
     */
    where?: AuthorizationOfDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthorizationOfDistributions to fetch.
     */
    orderBy?: AuthorizationOfDistributionOrderByWithRelationInput | AuthorizationOfDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthorizationOfDistributions.
     */
    cursor?: AuthorizationOfDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthorizationOfDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthorizationOfDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthorizationOfDistributions.
     */
    distinct?: AuthorizationOfDistributionScalarFieldEnum | AuthorizationOfDistributionScalarFieldEnum[]
  }


  /**
   * AuthorizationOfDistribution findMany
   */
  export type AuthorizationOfDistributionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    /**
     * Filter, which AuthorizationOfDistributions to fetch.
     */
    where?: AuthorizationOfDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthorizationOfDistributions to fetch.
     */
    orderBy?: AuthorizationOfDistributionOrderByWithRelationInput | AuthorizationOfDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuthorizationOfDistributions.
     */
    cursor?: AuthorizationOfDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthorizationOfDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthorizationOfDistributions.
     */
    skip?: number
    distinct?: AuthorizationOfDistributionScalarFieldEnum | AuthorizationOfDistributionScalarFieldEnum[]
  }


  /**
   * AuthorizationOfDistribution create
   */
  export type AuthorizationOfDistributionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    /**
     * The data needed to create a AuthorizationOfDistribution.
     */
    data: XOR<AuthorizationOfDistributionCreateInput, AuthorizationOfDistributionUncheckedCreateInput>
  }


  /**
   * AuthorizationOfDistribution createMany
   */
  export type AuthorizationOfDistributionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuthorizationOfDistributions.
     */
    data: AuthorizationOfDistributionCreateManyInput | AuthorizationOfDistributionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AuthorizationOfDistribution update
   */
  export type AuthorizationOfDistributionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    /**
     * The data needed to update a AuthorizationOfDistribution.
     */
    data: XOR<AuthorizationOfDistributionUpdateInput, AuthorizationOfDistributionUncheckedUpdateInput>
    /**
     * Choose, which AuthorizationOfDistribution to update.
     */
    where: AuthorizationOfDistributionWhereUniqueInput
  }


  /**
   * AuthorizationOfDistribution updateMany
   */
  export type AuthorizationOfDistributionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuthorizationOfDistributions.
     */
    data: XOR<AuthorizationOfDistributionUpdateManyMutationInput, AuthorizationOfDistributionUncheckedUpdateManyInput>
    /**
     * Filter which AuthorizationOfDistributions to update
     */
    where?: AuthorizationOfDistributionWhereInput
  }


  /**
   * AuthorizationOfDistribution upsert
   */
  export type AuthorizationOfDistributionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    /**
     * The filter to search for the AuthorizationOfDistribution to update in case it exists.
     */
    where: AuthorizationOfDistributionWhereUniqueInput
    /**
     * In case the AuthorizationOfDistribution found by the `where` argument doesn't exist, create a new AuthorizationOfDistribution with this data.
     */
    create: XOR<AuthorizationOfDistributionCreateInput, AuthorizationOfDistributionUncheckedCreateInput>
    /**
     * In case the AuthorizationOfDistribution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthorizationOfDistributionUpdateInput, AuthorizationOfDistributionUncheckedUpdateInput>
  }


  /**
   * AuthorizationOfDistribution delete
   */
  export type AuthorizationOfDistributionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
    /**
     * Filter which AuthorizationOfDistribution to delete.
     */
    where: AuthorizationOfDistributionWhereUniqueInput
  }


  /**
   * AuthorizationOfDistribution deleteMany
   */
  export type AuthorizationOfDistributionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthorizationOfDistributions to delete
     */
    where?: AuthorizationOfDistributionWhereInput
  }


  /**
   * AuthorizationOfDistribution.AuthorizationsHasSectors
   */
  export type AuthorizationOfDistribution$AuthorizationsHasSectorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    where?: AuthorizationsHasSectorsWhereInput
    orderBy?: AuthorizationsHasSectorsOrderByWithRelationInput | AuthorizationsHasSectorsOrderByWithRelationInput[]
    cursor?: AuthorizationsHasSectorsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthorizationsHasSectorsScalarFieldEnum | AuthorizationsHasSectorsScalarFieldEnum[]
  }


  /**
   * AuthorizationOfDistribution.ReportsDistributions
   */
  export type AuthorizationOfDistribution$ReportsDistributionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    where?: ReportsDistributionsWhereInput
  }


  /**
   * AuthorizationOfDistribution without action
   */
  export type AuthorizationOfDistributionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationOfDistribution
     */
    select?: AuthorizationOfDistributionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationOfDistributionInclude<ExtArgs> | null
  }



  /**
   * Model AuthorizationsHasSectors
   */

  export type AggregateAuthorizationsHasSectors = {
    _count: AuthorizationsHasSectorsCountAggregateOutputType | null
    _min: AuthorizationsHasSectorsMinAggregateOutputType | null
    _max: AuthorizationsHasSectorsMaxAggregateOutputType | null
  }

  export type AuthorizationsHasSectorsMinAggregateOutputType = {
    id: string | null
    sector_id: string | null
    authorization_of_distribution_id: string | null
    userId: string | null
  }

  export type AuthorizationsHasSectorsMaxAggregateOutputType = {
    id: string | null
    sector_id: string | null
    authorization_of_distribution_id: string | null
    userId: string | null
  }

  export type AuthorizationsHasSectorsCountAggregateOutputType = {
    id: number
    sector_id: number
    authorization_of_distribution_id: number
    userId: number
    _all: number
  }


  export type AuthorizationsHasSectorsMinAggregateInputType = {
    id?: true
    sector_id?: true
    authorization_of_distribution_id?: true
    userId?: true
  }

  export type AuthorizationsHasSectorsMaxAggregateInputType = {
    id?: true
    sector_id?: true
    authorization_of_distribution_id?: true
    userId?: true
  }

  export type AuthorizationsHasSectorsCountAggregateInputType = {
    id?: true
    sector_id?: true
    authorization_of_distribution_id?: true
    userId?: true
    _all?: true
  }

  export type AuthorizationsHasSectorsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthorizationsHasSectors to aggregate.
     */
    where?: AuthorizationsHasSectorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthorizationsHasSectors to fetch.
     */
    orderBy?: AuthorizationsHasSectorsOrderByWithRelationInput | AuthorizationsHasSectorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthorizationsHasSectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthorizationsHasSectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthorizationsHasSectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuthorizationsHasSectors
    **/
    _count?: true | AuthorizationsHasSectorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthorizationsHasSectorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthorizationsHasSectorsMaxAggregateInputType
  }

  export type GetAuthorizationsHasSectorsAggregateType<T extends AuthorizationsHasSectorsAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthorizationsHasSectors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthorizationsHasSectors[P]>
      : GetScalarType<T[P], AggregateAuthorizationsHasSectors[P]>
  }




  export type AuthorizationsHasSectorsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthorizationsHasSectorsWhereInput
    orderBy?: AuthorizationsHasSectorsOrderByWithAggregationInput | AuthorizationsHasSectorsOrderByWithAggregationInput[]
    by: AuthorizationsHasSectorsScalarFieldEnum[] | AuthorizationsHasSectorsScalarFieldEnum
    having?: AuthorizationsHasSectorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthorizationsHasSectorsCountAggregateInputType | true
    _min?: AuthorizationsHasSectorsMinAggregateInputType
    _max?: AuthorizationsHasSectorsMaxAggregateInputType
  }

  export type AuthorizationsHasSectorsGroupByOutputType = {
    id: string
    sector_id: string
    authorization_of_distribution_id: string
    userId: string | null
    _count: AuthorizationsHasSectorsCountAggregateOutputType | null
    _min: AuthorizationsHasSectorsMinAggregateOutputType | null
    _max: AuthorizationsHasSectorsMaxAggregateOutputType | null
  }

  type GetAuthorizationsHasSectorsGroupByPayload<T extends AuthorizationsHasSectorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthorizationsHasSectorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthorizationsHasSectorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthorizationsHasSectorsGroupByOutputType[P]>
            : GetScalarType<T[P], AuthorizationsHasSectorsGroupByOutputType[P]>
        }
      >
    >


  export type AuthorizationsHasSectorsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sector_id?: boolean
    authorization_of_distribution_id?: boolean
    userId?: boolean
    AuthorizationsDistributions?: boolean | AuthorizationOfDistributionDefaultArgs<ExtArgs>
    Sector?: boolean | SectorDefaultArgs<ExtArgs>
    User?: boolean | AuthorizationsHasSectors$UserArgs<ExtArgs>
  }, ExtArgs["result"]["authorizationsHasSectors"]>

  export type AuthorizationsHasSectorsSelectScalar = {
    id?: boolean
    sector_id?: boolean
    authorization_of_distribution_id?: boolean
    userId?: boolean
  }

  export type AuthorizationsHasSectorsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    AuthorizationsDistributions?: boolean | AuthorizationOfDistributionDefaultArgs<ExtArgs>
    Sector?: boolean | SectorDefaultArgs<ExtArgs>
    User?: boolean | AuthorizationsHasSectors$UserArgs<ExtArgs>
  }


  export type $AuthorizationsHasSectorsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "AuthorizationsHasSectors"
    objects: {
      AuthorizationsDistributions: Prisma.$AuthorizationOfDistributionPayload<ExtArgs>
      Sector: Prisma.$SectorPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: string
      sector_id: string
      authorization_of_distribution_id: string
      userId: string | null
    }, ExtArgs["result"]["authorizationsHasSectors"]>
    composites: {}
  }


  type AuthorizationsHasSectorsGetPayload<S extends boolean | null | undefined | AuthorizationsHasSectorsDefaultArgs> = $Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload, S>

  type AuthorizationsHasSectorsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AuthorizationsHasSectorsFindManyArgs, 'select' | 'include'> & {
      select?: AuthorizationsHasSectorsCountAggregateInputType | true
    }

  export interface AuthorizationsHasSectorsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuthorizationsHasSectors'], meta: { name: 'AuthorizationsHasSectors' } }
    /**
     * Find zero or one AuthorizationsHasSectors that matches the filter.
     * @param {AuthorizationsHasSectorsFindUniqueArgs} args - Arguments to find a AuthorizationsHasSectors
     * @example
     * // Get one AuthorizationsHasSectors
     * const authorizationsHasSectors = await prisma.authorizationsHasSectors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuthorizationsHasSectorsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationsHasSectorsFindUniqueArgs<ExtArgs>>
    ): Prisma__AuthorizationsHasSectorsClient<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AuthorizationsHasSectors that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuthorizationsHasSectorsFindUniqueOrThrowArgs} args - Arguments to find a AuthorizationsHasSectors
     * @example
     * // Get one AuthorizationsHasSectors
     * const authorizationsHasSectors = await prisma.authorizationsHasSectors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuthorizationsHasSectorsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationsHasSectorsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuthorizationsHasSectorsClient<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AuthorizationsHasSectors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationsHasSectorsFindFirstArgs} args - Arguments to find a AuthorizationsHasSectors
     * @example
     * // Get one AuthorizationsHasSectors
     * const authorizationsHasSectors = await prisma.authorizationsHasSectors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuthorizationsHasSectorsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationsHasSectorsFindFirstArgs<ExtArgs>>
    ): Prisma__AuthorizationsHasSectorsClient<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AuthorizationsHasSectors that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationsHasSectorsFindFirstOrThrowArgs} args - Arguments to find a AuthorizationsHasSectors
     * @example
     * // Get one AuthorizationsHasSectors
     * const authorizationsHasSectors = await prisma.authorizationsHasSectors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuthorizationsHasSectorsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationsHasSectorsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuthorizationsHasSectorsClient<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AuthorizationsHasSectors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationsHasSectorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthorizationsHasSectors
     * const authorizationsHasSectors = await prisma.authorizationsHasSectors.findMany()
     * 
     * // Get first 10 AuthorizationsHasSectors
     * const authorizationsHasSectors = await prisma.authorizationsHasSectors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorizationsHasSectorsWithIdOnly = await prisma.authorizationsHasSectors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AuthorizationsHasSectorsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationsHasSectorsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AuthorizationsHasSectors.
     * @param {AuthorizationsHasSectorsCreateArgs} args - Arguments to create a AuthorizationsHasSectors.
     * @example
     * // Create one AuthorizationsHasSectors
     * const AuthorizationsHasSectors = await prisma.authorizationsHasSectors.create({
     *   data: {
     *     // ... data to create a AuthorizationsHasSectors
     *   }
     * })
     * 
    **/
    create<T extends AuthorizationsHasSectorsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationsHasSectorsCreateArgs<ExtArgs>>
    ): Prisma__AuthorizationsHasSectorsClient<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AuthorizationsHasSectors.
     *     @param {AuthorizationsHasSectorsCreateManyArgs} args - Arguments to create many AuthorizationsHasSectors.
     *     @example
     *     // Create many AuthorizationsHasSectors
     *     const authorizationsHasSectors = await prisma.authorizationsHasSectors.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuthorizationsHasSectorsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationsHasSectorsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuthorizationsHasSectors.
     * @param {AuthorizationsHasSectorsDeleteArgs} args - Arguments to delete one AuthorizationsHasSectors.
     * @example
     * // Delete one AuthorizationsHasSectors
     * const AuthorizationsHasSectors = await prisma.authorizationsHasSectors.delete({
     *   where: {
     *     // ... filter to delete one AuthorizationsHasSectors
     *   }
     * })
     * 
    **/
    delete<T extends AuthorizationsHasSectorsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationsHasSectorsDeleteArgs<ExtArgs>>
    ): Prisma__AuthorizationsHasSectorsClient<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AuthorizationsHasSectors.
     * @param {AuthorizationsHasSectorsUpdateArgs} args - Arguments to update one AuthorizationsHasSectors.
     * @example
     * // Update one AuthorizationsHasSectors
     * const authorizationsHasSectors = await prisma.authorizationsHasSectors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuthorizationsHasSectorsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationsHasSectorsUpdateArgs<ExtArgs>>
    ): Prisma__AuthorizationsHasSectorsClient<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AuthorizationsHasSectors.
     * @param {AuthorizationsHasSectorsDeleteManyArgs} args - Arguments to filter AuthorizationsHasSectors to delete.
     * @example
     * // Delete a few AuthorizationsHasSectors
     * const { count } = await prisma.authorizationsHasSectors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuthorizationsHasSectorsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorizationsHasSectorsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthorizationsHasSectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationsHasSectorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthorizationsHasSectors
     * const authorizationsHasSectors = await prisma.authorizationsHasSectors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuthorizationsHasSectorsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationsHasSectorsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuthorizationsHasSectors.
     * @param {AuthorizationsHasSectorsUpsertArgs} args - Arguments to update or create a AuthorizationsHasSectors.
     * @example
     * // Update or create a AuthorizationsHasSectors
     * const authorizationsHasSectors = await prisma.authorizationsHasSectors.upsert({
     *   create: {
     *     // ... data to create a AuthorizationsHasSectors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthorizationsHasSectors we want to update
     *   }
     * })
    **/
    upsert<T extends AuthorizationsHasSectorsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorizationsHasSectorsUpsertArgs<ExtArgs>>
    ): Prisma__AuthorizationsHasSectorsClient<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AuthorizationsHasSectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationsHasSectorsCountArgs} args - Arguments to filter AuthorizationsHasSectors to count.
     * @example
     * // Count the number of AuthorizationsHasSectors
     * const count = await prisma.authorizationsHasSectors.count({
     *   where: {
     *     // ... the filter for the AuthorizationsHasSectors we want to count
     *   }
     * })
    **/
    count<T extends AuthorizationsHasSectorsCountArgs>(
      args?: Subset<T, AuthorizationsHasSectorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorizationsHasSectorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthorizationsHasSectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationsHasSectorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorizationsHasSectorsAggregateArgs>(args: Subset<T, AuthorizationsHasSectorsAggregateArgs>): Prisma.PrismaPromise<GetAuthorizationsHasSectorsAggregateType<T>>

    /**
     * Group by AuthorizationsHasSectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorizationsHasSectorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthorizationsHasSectorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthorizationsHasSectorsGroupByArgs['orderBy'] }
        : { orderBy?: AuthorizationsHasSectorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthorizationsHasSectorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorizationsHasSectorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuthorizationsHasSectors model
   */
  readonly fields: AuthorizationsHasSectorsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuthorizationsHasSectors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthorizationsHasSectorsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    AuthorizationsDistributions<T extends AuthorizationOfDistributionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuthorizationOfDistributionDefaultArgs<ExtArgs>>): Prisma__AuthorizationOfDistributionClient<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Sector<T extends SectorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SectorDefaultArgs<ExtArgs>>): Prisma__SectorClient<$Result.GetResult<Prisma.$SectorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    User<T extends AuthorizationsHasSectors$UserArgs<ExtArgs> = {}>(args?: Subset<T, AuthorizationsHasSectors$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AuthorizationsHasSectors model
   */ 
  interface AuthorizationsHasSectorsFieldRefs {
    readonly id: FieldRef<"AuthorizationsHasSectors", 'String'>
    readonly sector_id: FieldRef<"AuthorizationsHasSectors", 'String'>
    readonly authorization_of_distribution_id: FieldRef<"AuthorizationsHasSectors", 'String'>
    readonly userId: FieldRef<"AuthorizationsHasSectors", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AuthorizationsHasSectors findUnique
   */
  export type AuthorizationsHasSectorsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    /**
     * Filter, which AuthorizationsHasSectors to fetch.
     */
    where: AuthorizationsHasSectorsWhereUniqueInput
  }


  /**
   * AuthorizationsHasSectors findUniqueOrThrow
   */
  export type AuthorizationsHasSectorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    /**
     * Filter, which AuthorizationsHasSectors to fetch.
     */
    where: AuthorizationsHasSectorsWhereUniqueInput
  }


  /**
   * AuthorizationsHasSectors findFirst
   */
  export type AuthorizationsHasSectorsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    /**
     * Filter, which AuthorizationsHasSectors to fetch.
     */
    where?: AuthorizationsHasSectorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthorizationsHasSectors to fetch.
     */
    orderBy?: AuthorizationsHasSectorsOrderByWithRelationInput | AuthorizationsHasSectorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthorizationsHasSectors.
     */
    cursor?: AuthorizationsHasSectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthorizationsHasSectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthorizationsHasSectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthorizationsHasSectors.
     */
    distinct?: AuthorizationsHasSectorsScalarFieldEnum | AuthorizationsHasSectorsScalarFieldEnum[]
  }


  /**
   * AuthorizationsHasSectors findFirstOrThrow
   */
  export type AuthorizationsHasSectorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    /**
     * Filter, which AuthorizationsHasSectors to fetch.
     */
    where?: AuthorizationsHasSectorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthorizationsHasSectors to fetch.
     */
    orderBy?: AuthorizationsHasSectorsOrderByWithRelationInput | AuthorizationsHasSectorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthorizationsHasSectors.
     */
    cursor?: AuthorizationsHasSectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthorizationsHasSectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthorizationsHasSectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthorizationsHasSectors.
     */
    distinct?: AuthorizationsHasSectorsScalarFieldEnum | AuthorizationsHasSectorsScalarFieldEnum[]
  }


  /**
   * AuthorizationsHasSectors findMany
   */
  export type AuthorizationsHasSectorsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    /**
     * Filter, which AuthorizationsHasSectors to fetch.
     */
    where?: AuthorizationsHasSectorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthorizationsHasSectors to fetch.
     */
    orderBy?: AuthorizationsHasSectorsOrderByWithRelationInput | AuthorizationsHasSectorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuthorizationsHasSectors.
     */
    cursor?: AuthorizationsHasSectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthorizationsHasSectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthorizationsHasSectors.
     */
    skip?: number
    distinct?: AuthorizationsHasSectorsScalarFieldEnum | AuthorizationsHasSectorsScalarFieldEnum[]
  }


  /**
   * AuthorizationsHasSectors create
   */
  export type AuthorizationsHasSectorsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    /**
     * The data needed to create a AuthorizationsHasSectors.
     */
    data: XOR<AuthorizationsHasSectorsCreateInput, AuthorizationsHasSectorsUncheckedCreateInput>
  }


  /**
   * AuthorizationsHasSectors createMany
   */
  export type AuthorizationsHasSectorsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuthorizationsHasSectors.
     */
    data: AuthorizationsHasSectorsCreateManyInput | AuthorizationsHasSectorsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AuthorizationsHasSectors update
   */
  export type AuthorizationsHasSectorsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    /**
     * The data needed to update a AuthorizationsHasSectors.
     */
    data: XOR<AuthorizationsHasSectorsUpdateInput, AuthorizationsHasSectorsUncheckedUpdateInput>
    /**
     * Choose, which AuthorizationsHasSectors to update.
     */
    where: AuthorizationsHasSectorsWhereUniqueInput
  }


  /**
   * AuthorizationsHasSectors updateMany
   */
  export type AuthorizationsHasSectorsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuthorizationsHasSectors.
     */
    data: XOR<AuthorizationsHasSectorsUpdateManyMutationInput, AuthorizationsHasSectorsUncheckedUpdateManyInput>
    /**
     * Filter which AuthorizationsHasSectors to update
     */
    where?: AuthorizationsHasSectorsWhereInput
  }


  /**
   * AuthorizationsHasSectors upsert
   */
  export type AuthorizationsHasSectorsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    /**
     * The filter to search for the AuthorizationsHasSectors to update in case it exists.
     */
    where: AuthorizationsHasSectorsWhereUniqueInput
    /**
     * In case the AuthorizationsHasSectors found by the `where` argument doesn't exist, create a new AuthorizationsHasSectors with this data.
     */
    create: XOR<AuthorizationsHasSectorsCreateInput, AuthorizationsHasSectorsUncheckedCreateInput>
    /**
     * In case the AuthorizationsHasSectors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthorizationsHasSectorsUpdateInput, AuthorizationsHasSectorsUncheckedUpdateInput>
  }


  /**
   * AuthorizationsHasSectors delete
   */
  export type AuthorizationsHasSectorsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    /**
     * Filter which AuthorizationsHasSectors to delete.
     */
    where: AuthorizationsHasSectorsWhereUniqueInput
  }


  /**
   * AuthorizationsHasSectors deleteMany
   */
  export type AuthorizationsHasSectorsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthorizationsHasSectors to delete
     */
    where?: AuthorizationsHasSectorsWhereInput
  }


  /**
   * AuthorizationsHasSectors.User
   */
  export type AuthorizationsHasSectors$UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * AuthorizationsHasSectors without action
   */
  export type AuthorizationsHasSectorsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
  }



  /**
   * Model ReportsDistributions
   */

  export type AggregateReportsDistributions = {
    _count: ReportsDistributionsCountAggregateOutputType | null
    _min: ReportsDistributionsMinAggregateOutputType | null
    _max: ReportsDistributionsMaxAggregateOutputType | null
  }

  export type ReportsDistributionsMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    first_photo_url: string | null
    second_photo_url: string | null
    third_photo_url: string | null
    user_created_id: string | null
    authorization_id: string | null
  }

  export type ReportsDistributionsMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    first_photo_url: string | null
    second_photo_url: string | null
    third_photo_url: string | null
    user_created_id: string | null
    authorization_id: string | null
  }

  export type ReportsDistributionsCountAggregateOutputType = {
    id: number
    created_at: number
    first_photo_url: number
    second_photo_url: number
    third_photo_url: number
    user_created_id: number
    authorization_id: number
    _all: number
  }


  export type ReportsDistributionsMinAggregateInputType = {
    id?: true
    created_at?: true
    first_photo_url?: true
    second_photo_url?: true
    third_photo_url?: true
    user_created_id?: true
    authorization_id?: true
  }

  export type ReportsDistributionsMaxAggregateInputType = {
    id?: true
    created_at?: true
    first_photo_url?: true
    second_photo_url?: true
    third_photo_url?: true
    user_created_id?: true
    authorization_id?: true
  }

  export type ReportsDistributionsCountAggregateInputType = {
    id?: true
    created_at?: true
    first_photo_url?: true
    second_photo_url?: true
    third_photo_url?: true
    user_created_id?: true
    authorization_id?: true
    _all?: true
  }

  export type ReportsDistributionsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportsDistributions to aggregate.
     */
    where?: ReportsDistributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportsDistributions to fetch.
     */
    orderBy?: ReportsDistributionsOrderByWithRelationInput | ReportsDistributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportsDistributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportsDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportsDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportsDistributions
    **/
    _count?: true | ReportsDistributionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportsDistributionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportsDistributionsMaxAggregateInputType
  }

  export type GetReportsDistributionsAggregateType<T extends ReportsDistributionsAggregateArgs> = {
        [P in keyof T & keyof AggregateReportsDistributions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportsDistributions[P]>
      : GetScalarType<T[P], AggregateReportsDistributions[P]>
  }




  export type ReportsDistributionsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReportsDistributionsWhereInput
    orderBy?: ReportsDistributionsOrderByWithAggregationInput | ReportsDistributionsOrderByWithAggregationInput[]
    by: ReportsDistributionsScalarFieldEnum[] | ReportsDistributionsScalarFieldEnum
    having?: ReportsDistributionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportsDistributionsCountAggregateInputType | true
    _min?: ReportsDistributionsMinAggregateInputType
    _max?: ReportsDistributionsMaxAggregateInputType
  }

  export type ReportsDistributionsGroupByOutputType = {
    id: string
    created_at: Date
    first_photo_url: string
    second_photo_url: string
    third_photo_url: string
    user_created_id: string
    authorization_id: string
    _count: ReportsDistributionsCountAggregateOutputType | null
    _min: ReportsDistributionsMinAggregateOutputType | null
    _max: ReportsDistributionsMaxAggregateOutputType | null
  }

  type GetReportsDistributionsGroupByPayload<T extends ReportsDistributionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportsDistributionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportsDistributionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportsDistributionsGroupByOutputType[P]>
            : GetScalarType<T[P], ReportsDistributionsGroupByOutputType[P]>
        }
      >
    >


  export type ReportsDistributionsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    first_photo_url?: boolean
    second_photo_url?: boolean
    third_photo_url?: boolean
    user_created_id?: boolean
    authorization_id?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Authorization?: boolean | AuthorizationOfDistributionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportsDistributions"]>

  export type ReportsDistributionsSelectScalar = {
    id?: boolean
    created_at?: boolean
    first_photo_url?: boolean
    second_photo_url?: boolean
    third_photo_url?: boolean
    user_created_id?: boolean
    authorization_id?: boolean
  }

  export type ReportsDistributionsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Authorization?: boolean | AuthorizationOfDistributionDefaultArgs<ExtArgs>
  }


  export type $ReportsDistributionsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ReportsDistributions"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Authorization: Prisma.$AuthorizationOfDistributionPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      created_at: Date
      first_photo_url: string
      second_photo_url: string
      third_photo_url: string
      user_created_id: string
      authorization_id: string
    }, ExtArgs["result"]["reportsDistributions"]>
    composites: {}
  }


  type ReportsDistributionsGetPayload<S extends boolean | null | undefined | ReportsDistributionsDefaultArgs> = $Result.GetResult<Prisma.$ReportsDistributionsPayload, S>

  type ReportsDistributionsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ReportsDistributionsFindManyArgs, 'select' | 'include'> & {
      select?: ReportsDistributionsCountAggregateInputType | true
    }

  export interface ReportsDistributionsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportsDistributions'], meta: { name: 'ReportsDistributions' } }
    /**
     * Find zero or one ReportsDistributions that matches the filter.
     * @param {ReportsDistributionsFindUniqueArgs} args - Arguments to find a ReportsDistributions
     * @example
     * // Get one ReportsDistributions
     * const reportsDistributions = await prisma.reportsDistributions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReportsDistributionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReportsDistributionsFindUniqueArgs<ExtArgs>>
    ): Prisma__ReportsDistributionsClient<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ReportsDistributions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReportsDistributionsFindUniqueOrThrowArgs} args - Arguments to find a ReportsDistributions
     * @example
     * // Get one ReportsDistributions
     * const reportsDistributions = await prisma.reportsDistributions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReportsDistributionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportsDistributionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReportsDistributionsClient<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ReportsDistributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsDistributionsFindFirstArgs} args - Arguments to find a ReportsDistributions
     * @example
     * // Get one ReportsDistributions
     * const reportsDistributions = await prisma.reportsDistributions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReportsDistributionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportsDistributionsFindFirstArgs<ExtArgs>>
    ): Prisma__ReportsDistributionsClient<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ReportsDistributions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsDistributionsFindFirstOrThrowArgs} args - Arguments to find a ReportsDistributions
     * @example
     * // Get one ReportsDistributions
     * const reportsDistributions = await prisma.reportsDistributions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReportsDistributionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportsDistributionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReportsDistributionsClient<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ReportsDistributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsDistributionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportsDistributions
     * const reportsDistributions = await prisma.reportsDistributions.findMany()
     * 
     * // Get first 10 ReportsDistributions
     * const reportsDistributions = await prisma.reportsDistributions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportsDistributionsWithIdOnly = await prisma.reportsDistributions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReportsDistributionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportsDistributionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ReportsDistributions.
     * @param {ReportsDistributionsCreateArgs} args - Arguments to create a ReportsDistributions.
     * @example
     * // Create one ReportsDistributions
     * const ReportsDistributions = await prisma.reportsDistributions.create({
     *   data: {
     *     // ... data to create a ReportsDistributions
     *   }
     * })
     * 
    **/
    create<T extends ReportsDistributionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReportsDistributionsCreateArgs<ExtArgs>>
    ): Prisma__ReportsDistributionsClient<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ReportsDistributions.
     *     @param {ReportsDistributionsCreateManyArgs} args - Arguments to create many ReportsDistributions.
     *     @example
     *     // Create many ReportsDistributions
     *     const reportsDistributions = await prisma.reportsDistributions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReportsDistributionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportsDistributionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ReportsDistributions.
     * @param {ReportsDistributionsDeleteArgs} args - Arguments to delete one ReportsDistributions.
     * @example
     * // Delete one ReportsDistributions
     * const ReportsDistributions = await prisma.reportsDistributions.delete({
     *   where: {
     *     // ... filter to delete one ReportsDistributions
     *   }
     * })
     * 
    **/
    delete<T extends ReportsDistributionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReportsDistributionsDeleteArgs<ExtArgs>>
    ): Prisma__ReportsDistributionsClient<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ReportsDistributions.
     * @param {ReportsDistributionsUpdateArgs} args - Arguments to update one ReportsDistributions.
     * @example
     * // Update one ReportsDistributions
     * const reportsDistributions = await prisma.reportsDistributions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReportsDistributionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReportsDistributionsUpdateArgs<ExtArgs>>
    ): Prisma__ReportsDistributionsClient<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ReportsDistributions.
     * @param {ReportsDistributionsDeleteManyArgs} args - Arguments to filter ReportsDistributions to delete.
     * @example
     * // Delete a few ReportsDistributions
     * const { count } = await prisma.reportsDistributions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReportsDistributionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportsDistributionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportsDistributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsDistributionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportsDistributions
     * const reportsDistributions = await prisma.reportsDistributions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReportsDistributionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReportsDistributionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReportsDistributions.
     * @param {ReportsDistributionsUpsertArgs} args - Arguments to update or create a ReportsDistributions.
     * @example
     * // Update or create a ReportsDistributions
     * const reportsDistributions = await prisma.reportsDistributions.upsert({
     *   create: {
     *     // ... data to create a ReportsDistributions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportsDistributions we want to update
     *   }
     * })
    **/
    upsert<T extends ReportsDistributionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReportsDistributionsUpsertArgs<ExtArgs>>
    ): Prisma__ReportsDistributionsClient<$Result.GetResult<Prisma.$ReportsDistributionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ReportsDistributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsDistributionsCountArgs} args - Arguments to filter ReportsDistributions to count.
     * @example
     * // Count the number of ReportsDistributions
     * const count = await prisma.reportsDistributions.count({
     *   where: {
     *     // ... the filter for the ReportsDistributions we want to count
     *   }
     * })
    **/
    count<T extends ReportsDistributionsCountArgs>(
      args?: Subset<T, ReportsDistributionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportsDistributionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportsDistributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsDistributionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportsDistributionsAggregateArgs>(args: Subset<T, ReportsDistributionsAggregateArgs>): Prisma.PrismaPromise<GetReportsDistributionsAggregateType<T>>

    /**
     * Group by ReportsDistributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsDistributionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportsDistributionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportsDistributionsGroupByArgs['orderBy'] }
        : { orderBy?: ReportsDistributionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportsDistributionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportsDistributionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportsDistributions model
   */
  readonly fields: ReportsDistributionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportsDistributions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportsDistributionsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Authorization<T extends AuthorizationOfDistributionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuthorizationOfDistributionDefaultArgs<ExtArgs>>): Prisma__AuthorizationOfDistributionClient<$Result.GetResult<Prisma.$AuthorizationOfDistributionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ReportsDistributions model
   */ 
  interface ReportsDistributionsFieldRefs {
    readonly id: FieldRef<"ReportsDistributions", 'String'>
    readonly created_at: FieldRef<"ReportsDistributions", 'DateTime'>
    readonly first_photo_url: FieldRef<"ReportsDistributions", 'String'>
    readonly second_photo_url: FieldRef<"ReportsDistributions", 'String'>
    readonly third_photo_url: FieldRef<"ReportsDistributions", 'String'>
    readonly user_created_id: FieldRef<"ReportsDistributions", 'String'>
    readonly authorization_id: FieldRef<"ReportsDistributions", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ReportsDistributions findUnique
   */
  export type ReportsDistributionsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    /**
     * Filter, which ReportsDistributions to fetch.
     */
    where: ReportsDistributionsWhereUniqueInput
  }


  /**
   * ReportsDistributions findUniqueOrThrow
   */
  export type ReportsDistributionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    /**
     * Filter, which ReportsDistributions to fetch.
     */
    where: ReportsDistributionsWhereUniqueInput
  }


  /**
   * ReportsDistributions findFirst
   */
  export type ReportsDistributionsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    /**
     * Filter, which ReportsDistributions to fetch.
     */
    where?: ReportsDistributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportsDistributions to fetch.
     */
    orderBy?: ReportsDistributionsOrderByWithRelationInput | ReportsDistributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportsDistributions.
     */
    cursor?: ReportsDistributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportsDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportsDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportsDistributions.
     */
    distinct?: ReportsDistributionsScalarFieldEnum | ReportsDistributionsScalarFieldEnum[]
  }


  /**
   * ReportsDistributions findFirstOrThrow
   */
  export type ReportsDistributionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    /**
     * Filter, which ReportsDistributions to fetch.
     */
    where?: ReportsDistributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportsDistributions to fetch.
     */
    orderBy?: ReportsDistributionsOrderByWithRelationInput | ReportsDistributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportsDistributions.
     */
    cursor?: ReportsDistributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportsDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportsDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportsDistributions.
     */
    distinct?: ReportsDistributionsScalarFieldEnum | ReportsDistributionsScalarFieldEnum[]
  }


  /**
   * ReportsDistributions findMany
   */
  export type ReportsDistributionsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    /**
     * Filter, which ReportsDistributions to fetch.
     */
    where?: ReportsDistributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportsDistributions to fetch.
     */
    orderBy?: ReportsDistributionsOrderByWithRelationInput | ReportsDistributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportsDistributions.
     */
    cursor?: ReportsDistributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportsDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportsDistributions.
     */
    skip?: number
    distinct?: ReportsDistributionsScalarFieldEnum | ReportsDistributionsScalarFieldEnum[]
  }


  /**
   * ReportsDistributions create
   */
  export type ReportsDistributionsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportsDistributions.
     */
    data: XOR<ReportsDistributionsCreateInput, ReportsDistributionsUncheckedCreateInput>
  }


  /**
   * ReportsDistributions createMany
   */
  export type ReportsDistributionsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportsDistributions.
     */
    data: ReportsDistributionsCreateManyInput | ReportsDistributionsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ReportsDistributions update
   */
  export type ReportsDistributionsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportsDistributions.
     */
    data: XOR<ReportsDistributionsUpdateInput, ReportsDistributionsUncheckedUpdateInput>
    /**
     * Choose, which ReportsDistributions to update.
     */
    where: ReportsDistributionsWhereUniqueInput
  }


  /**
   * ReportsDistributions updateMany
   */
  export type ReportsDistributionsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportsDistributions.
     */
    data: XOR<ReportsDistributionsUpdateManyMutationInput, ReportsDistributionsUncheckedUpdateManyInput>
    /**
     * Filter which ReportsDistributions to update
     */
    where?: ReportsDistributionsWhereInput
  }


  /**
   * ReportsDistributions upsert
   */
  export type ReportsDistributionsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportsDistributions to update in case it exists.
     */
    where: ReportsDistributionsWhereUniqueInput
    /**
     * In case the ReportsDistributions found by the `where` argument doesn't exist, create a new ReportsDistributions with this data.
     */
    create: XOR<ReportsDistributionsCreateInput, ReportsDistributionsUncheckedCreateInput>
    /**
     * In case the ReportsDistributions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportsDistributionsUpdateInput, ReportsDistributionsUncheckedUpdateInput>
  }


  /**
   * ReportsDistributions delete
   */
  export type ReportsDistributionsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
    /**
     * Filter which ReportsDistributions to delete.
     */
    where: ReportsDistributionsWhereUniqueInput
  }


  /**
   * ReportsDistributions deleteMany
   */
  export type ReportsDistributionsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportsDistributions to delete
     */
    where?: ReportsDistributionsWhereInput
  }


  /**
   * ReportsDistributions without action
   */
  export type ReportsDistributionsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsDistributions
     */
    select?: ReportsDistributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportsDistributionsInclude<ExtArgs> | null
  }



  /**
   * Model Sector
   */

  export type AggregateSector = {
    _count: SectorCountAggregateOutputType | null
    _min: SectorMinAggregateOutputType | null
    _max: SectorMaxAggregateOutputType | null
  }

  export type SectorMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type SectorMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type SectorCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type SectorMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SectorMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SectorCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type SectorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sector to aggregate.
     */
    where?: SectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sectors to fetch.
     */
    orderBy?: SectorOrderByWithRelationInput | SectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sectors
    **/
    _count?: true | SectorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectorMaxAggregateInputType
  }

  export type GetSectorAggregateType<T extends SectorAggregateArgs> = {
        [P in keyof T & keyof AggregateSector]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSector[P]>
      : GetScalarType<T[P], AggregateSector[P]>
  }




  export type SectorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SectorWhereInput
    orderBy?: SectorOrderByWithAggregationInput | SectorOrderByWithAggregationInput[]
    by: SectorScalarFieldEnum[] | SectorScalarFieldEnum
    having?: SectorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectorCountAggregateInputType | true
    _min?: SectorMinAggregateInputType
    _max?: SectorMaxAggregateInputType
  }

  export type SectorGroupByOutputType = {
    id: string
    name: string
    _count: SectorCountAggregateOutputType | null
    _min: SectorMinAggregateOutputType | null
    _max: SectorMaxAggregateOutputType | null
  }

  type GetSectorGroupByPayload<T extends SectorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectorGroupByOutputType[P]>
            : GetScalarType<T[P], SectorGroupByOutputType[P]>
        }
      >
    >


  export type SectorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    AuthorizationsHasSectors?: boolean | Sector$AuthorizationsHasSectorsArgs<ExtArgs>
    _count?: boolean | SectorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sector"]>

  export type SectorSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type SectorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    AuthorizationsHasSectors?: boolean | Sector$AuthorizationsHasSectorsArgs<ExtArgs>
    _count?: boolean | SectorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SectorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Sector"
    objects: {
      AuthorizationsHasSectors: Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
    }, ExtArgs["result"]["sector"]>
    composites: {}
  }


  type SectorGetPayload<S extends boolean | null | undefined | SectorDefaultArgs> = $Result.GetResult<Prisma.$SectorPayload, S>

  type SectorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SectorFindManyArgs, 'select' | 'include'> & {
      select?: SectorCountAggregateInputType | true
    }

  export interface SectorDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sector'], meta: { name: 'Sector' } }
    /**
     * Find zero or one Sector that matches the filter.
     * @param {SectorFindUniqueArgs} args - Arguments to find a Sector
     * @example
     * // Get one Sector
     * const sector = await prisma.sector.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SectorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SectorFindUniqueArgs<ExtArgs>>
    ): Prisma__SectorClient<$Result.GetResult<Prisma.$SectorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sector that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SectorFindUniqueOrThrowArgs} args - Arguments to find a Sector
     * @example
     * // Get one Sector
     * const sector = await prisma.sector.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SectorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SectorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SectorClient<$Result.GetResult<Prisma.$SectorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sector that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorFindFirstArgs} args - Arguments to find a Sector
     * @example
     * // Get one Sector
     * const sector = await prisma.sector.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SectorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SectorFindFirstArgs<ExtArgs>>
    ): Prisma__SectorClient<$Result.GetResult<Prisma.$SectorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sector that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorFindFirstOrThrowArgs} args - Arguments to find a Sector
     * @example
     * // Get one Sector
     * const sector = await prisma.sector.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SectorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SectorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SectorClient<$Result.GetResult<Prisma.$SectorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sectors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sectors
     * const sectors = await prisma.sector.findMany()
     * 
     * // Get first 10 Sectors
     * const sectors = await prisma.sector.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectorWithIdOnly = await prisma.sector.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SectorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SectorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sector.
     * @param {SectorCreateArgs} args - Arguments to create a Sector.
     * @example
     * // Create one Sector
     * const Sector = await prisma.sector.create({
     *   data: {
     *     // ... data to create a Sector
     *   }
     * })
     * 
    **/
    create<T extends SectorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SectorCreateArgs<ExtArgs>>
    ): Prisma__SectorClient<$Result.GetResult<Prisma.$SectorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sectors.
     *     @param {SectorCreateManyArgs} args - Arguments to create many Sectors.
     *     @example
     *     // Create many Sectors
     *     const sector = await prisma.sector.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SectorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SectorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sector.
     * @param {SectorDeleteArgs} args - Arguments to delete one Sector.
     * @example
     * // Delete one Sector
     * const Sector = await prisma.sector.delete({
     *   where: {
     *     // ... filter to delete one Sector
     *   }
     * })
     * 
    **/
    delete<T extends SectorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SectorDeleteArgs<ExtArgs>>
    ): Prisma__SectorClient<$Result.GetResult<Prisma.$SectorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sector.
     * @param {SectorUpdateArgs} args - Arguments to update one Sector.
     * @example
     * // Update one Sector
     * const sector = await prisma.sector.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SectorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SectorUpdateArgs<ExtArgs>>
    ): Prisma__SectorClient<$Result.GetResult<Prisma.$SectorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sectors.
     * @param {SectorDeleteManyArgs} args - Arguments to filter Sectors to delete.
     * @example
     * // Delete a few Sectors
     * const { count } = await prisma.sector.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SectorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SectorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sectors
     * const sector = await prisma.sector.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SectorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SectorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sector.
     * @param {SectorUpsertArgs} args - Arguments to update or create a Sector.
     * @example
     * // Update or create a Sector
     * const sector = await prisma.sector.upsert({
     *   create: {
     *     // ... data to create a Sector
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sector we want to update
     *   }
     * })
    **/
    upsert<T extends SectorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SectorUpsertArgs<ExtArgs>>
    ): Prisma__SectorClient<$Result.GetResult<Prisma.$SectorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorCountArgs} args - Arguments to filter Sectors to count.
     * @example
     * // Count the number of Sectors
     * const count = await prisma.sector.count({
     *   where: {
     *     // ... the filter for the Sectors we want to count
     *   }
     * })
    **/
    count<T extends SectorCountArgs>(
      args?: Subset<T, SectorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sector.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectorAggregateArgs>(args: Subset<T, SectorAggregateArgs>): Prisma.PrismaPromise<GetSectorAggregateType<T>>

    /**
     * Group by Sector.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectorGroupByArgs['orderBy'] }
        : { orderBy?: SectorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sector model
   */
  readonly fields: SectorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sector.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    AuthorizationsHasSectors<T extends Sector$AuthorizationsHasSectorsArgs<ExtArgs> = {}>(args?: Subset<T, Sector$AuthorizationsHasSectorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorizationsHasSectorsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Sector model
   */ 
  interface SectorFieldRefs {
    readonly id: FieldRef<"Sector", 'String'>
    readonly name: FieldRef<"Sector", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Sector findUnique
   */
  export type SectorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sector
     */
    select?: SectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectorInclude<ExtArgs> | null
    /**
     * Filter, which Sector to fetch.
     */
    where: SectorWhereUniqueInput
  }


  /**
   * Sector findUniqueOrThrow
   */
  export type SectorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sector
     */
    select?: SectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectorInclude<ExtArgs> | null
    /**
     * Filter, which Sector to fetch.
     */
    where: SectorWhereUniqueInput
  }


  /**
   * Sector findFirst
   */
  export type SectorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sector
     */
    select?: SectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectorInclude<ExtArgs> | null
    /**
     * Filter, which Sector to fetch.
     */
    where?: SectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sectors to fetch.
     */
    orderBy?: SectorOrderByWithRelationInput | SectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sectors.
     */
    cursor?: SectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sectors.
     */
    distinct?: SectorScalarFieldEnum | SectorScalarFieldEnum[]
  }


  /**
   * Sector findFirstOrThrow
   */
  export type SectorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sector
     */
    select?: SectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectorInclude<ExtArgs> | null
    /**
     * Filter, which Sector to fetch.
     */
    where?: SectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sectors to fetch.
     */
    orderBy?: SectorOrderByWithRelationInput | SectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sectors.
     */
    cursor?: SectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sectors.
     */
    distinct?: SectorScalarFieldEnum | SectorScalarFieldEnum[]
  }


  /**
   * Sector findMany
   */
  export type SectorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sector
     */
    select?: SectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectorInclude<ExtArgs> | null
    /**
     * Filter, which Sectors to fetch.
     */
    where?: SectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sectors to fetch.
     */
    orderBy?: SectorOrderByWithRelationInput | SectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sectors.
     */
    cursor?: SectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sectors.
     */
    skip?: number
    distinct?: SectorScalarFieldEnum | SectorScalarFieldEnum[]
  }


  /**
   * Sector create
   */
  export type SectorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sector
     */
    select?: SectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectorInclude<ExtArgs> | null
    /**
     * The data needed to create a Sector.
     */
    data: XOR<SectorCreateInput, SectorUncheckedCreateInput>
  }


  /**
   * Sector createMany
   */
  export type SectorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sectors.
     */
    data: SectorCreateManyInput | SectorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Sector update
   */
  export type SectorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sector
     */
    select?: SectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectorInclude<ExtArgs> | null
    /**
     * The data needed to update a Sector.
     */
    data: XOR<SectorUpdateInput, SectorUncheckedUpdateInput>
    /**
     * Choose, which Sector to update.
     */
    where: SectorWhereUniqueInput
  }


  /**
   * Sector updateMany
   */
  export type SectorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sectors.
     */
    data: XOR<SectorUpdateManyMutationInput, SectorUncheckedUpdateManyInput>
    /**
     * Filter which Sectors to update
     */
    where?: SectorWhereInput
  }


  /**
   * Sector upsert
   */
  export type SectorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sector
     */
    select?: SectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectorInclude<ExtArgs> | null
    /**
     * The filter to search for the Sector to update in case it exists.
     */
    where: SectorWhereUniqueInput
    /**
     * In case the Sector found by the `where` argument doesn't exist, create a new Sector with this data.
     */
    create: XOR<SectorCreateInput, SectorUncheckedCreateInput>
    /**
     * In case the Sector was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectorUpdateInput, SectorUncheckedUpdateInput>
  }


  /**
   * Sector delete
   */
  export type SectorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sector
     */
    select?: SectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectorInclude<ExtArgs> | null
    /**
     * Filter which Sector to delete.
     */
    where: SectorWhereUniqueInput
  }


  /**
   * Sector deleteMany
   */
  export type SectorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sectors to delete
     */
    where?: SectorWhereInput
  }


  /**
   * Sector.AuthorizationsHasSectors
   */
  export type Sector$AuthorizationsHasSectorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorizationsHasSectors
     */
    select?: AuthorizationsHasSectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorizationsHasSectorsInclude<ExtArgs> | null
    where?: AuthorizationsHasSectorsWhereInput
    orderBy?: AuthorizationsHasSectorsOrderByWithRelationInput | AuthorizationsHasSectorsOrderByWithRelationInput[]
    cursor?: AuthorizationsHasSectorsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthorizationsHasSectorsScalarFieldEnum | AuthorizationsHasSectorsScalarFieldEnum[]
  }


  /**
   * Sector without action
   */
  export type SectorDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sector
     */
    select?: SectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SectorInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cpf_number: 'cpf_number',
    work_card_number: 'work_card_number',
    office: 'office',
    email: 'email',
    password_hash: 'password_hash',
    created_at: 'created_at',
    updated_at: 'updated_at',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    socialName: 'socialName',
    email: 'email',
    phone: 'phone',
    cnpj: 'cnpj',
    user_created_id: 'user_created_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const AuthorizationOfDistributionScalarFieldEnum: {
    id: 'id',
    creation_user_id: 'creation_user_id',
    client_id: 'client_id',
    created_at: 'created_at',
    value_of_thousand_in_cents: 'value_of_thousand_in_cents'
  };

  export type AuthorizationOfDistributionScalarFieldEnum = (typeof AuthorizationOfDistributionScalarFieldEnum)[keyof typeof AuthorizationOfDistributionScalarFieldEnum]


  export const AuthorizationsHasSectorsScalarFieldEnum: {
    id: 'id',
    sector_id: 'sector_id',
    authorization_of_distribution_id: 'authorization_of_distribution_id',
    userId: 'userId'
  };

  export type AuthorizationsHasSectorsScalarFieldEnum = (typeof AuthorizationsHasSectorsScalarFieldEnum)[keyof typeof AuthorizationsHasSectorsScalarFieldEnum]


  export const ReportsDistributionsScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    first_photo_url: 'first_photo_url',
    second_photo_url: 'second_photo_url',
    third_photo_url: 'third_photo_url',
    user_created_id: 'user_created_id',
    authorization_id: 'authorization_id'
  };

  export type ReportsDistributionsScalarFieldEnum = (typeof ReportsDistributionsScalarFieldEnum)[keyof typeof ReportsDistributionsScalarFieldEnum]


  export const SectorScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SectorScalarFieldEnum = (typeof SectorScalarFieldEnum)[keyof typeof SectorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    cpf_number?: StringFilter<"User"> | string
    work_card_number?: StringFilter<"User"> | string
    office?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    Client?: ClientListRelationFilter
    DistribuitionsAuthorizations?: AuthorizationOfDistributionListRelationFilter
    AuthorizationsHasSectors?: AuthorizationsHasSectorsListRelationFilter
    ReportsDistributions?: ReportsDistributionsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cpf_number?: SortOrder
    work_card_number?: SortOrder
    office?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    role?: SortOrder
    Client?: ClientOrderByRelationAggregateInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionOrderByRelationAggregateInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsOrderByRelationAggregateInput
    ReportsDistributions?: ReportsDistributionsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cpf_number?: string
    work_card_number?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    office?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    Client?: ClientListRelationFilter
    DistribuitionsAuthorizations?: AuthorizationOfDistributionListRelationFilter
    AuthorizationsHasSectors?: AuthorizationsHasSectorsListRelationFilter
    ReportsDistributions?: ReportsDistributionsListRelationFilter
  }, "id" | "cpf_number" | "work_card_number" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cpf_number?: SortOrder
    work_card_number?: SortOrder
    office?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    cpf_number?: StringWithAggregatesFilter<"User"> | string
    work_card_number?: StringWithAggregatesFilter<"User"> | string
    office?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password_hash?: StringWithAggregatesFilter<"User"> | string
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: StringFilter<"Client"> | string
    socialName?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    phone?: StringFilter<"Client"> | string
    cnpj?: StringFilter<"Client"> | string
    user_created_id?: StringFilter<"Client"> | string
    created_at?: DateTimeFilter<"Client"> | Date | string
    updated_at?: DateTimeNullableFilter<"Client"> | Date | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    DistributionAuthorization?: AuthorizationOfDistributionListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    socialName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    cnpj?: SortOrder
    user_created_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
    DistributionAuthorization?: AuthorizationOfDistributionOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    cnpj?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    socialName?: StringFilter<"Client"> | string
    user_created_id?: StringFilter<"Client"> | string
    created_at?: DateTimeFilter<"Client"> | Date | string
    updated_at?: DateTimeNullableFilter<"Client"> | Date | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    DistributionAuthorization?: AuthorizationOfDistributionListRelationFilter
  }, "id" | "email" | "phone" | "cnpj">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    socialName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    cnpj?: SortOrder
    user_created_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: ClientCountOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Client"> | string
    socialName?: StringWithAggregatesFilter<"Client"> | string
    email?: StringWithAggregatesFilter<"Client"> | string
    phone?: StringWithAggregatesFilter<"Client"> | string
    cnpj?: StringWithAggregatesFilter<"Client"> | string
    user_created_id?: StringWithAggregatesFilter<"Client"> | string
    created_at?: DateTimeWithAggregatesFilter<"Client"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"Client"> | Date | string | null
  }

  export type AuthorizationOfDistributionWhereInput = {
    AND?: AuthorizationOfDistributionWhereInput | AuthorizationOfDistributionWhereInput[]
    OR?: AuthorizationOfDistributionWhereInput[]
    NOT?: AuthorizationOfDistributionWhereInput | AuthorizationOfDistributionWhereInput[]
    id?: StringFilter<"AuthorizationOfDistribution"> | string
    creation_user_id?: StringFilter<"AuthorizationOfDistribution"> | string
    client_id?: StringFilter<"AuthorizationOfDistribution"> | string
    created_at?: DateTimeFilter<"AuthorizationOfDistribution"> | Date | string
    value_of_thousand_in_cents?: IntFilter<"AuthorizationOfDistribution"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    Client?: XOR<ClientRelationFilter, ClientWhereInput>
    AuthorizationsHasSectors?: AuthorizationsHasSectorsListRelationFilter
    ReportsDistributions?: XOR<ReportsDistributionsNullableRelationFilter, ReportsDistributionsWhereInput> | null
  }

  export type AuthorizationOfDistributionOrderByWithRelationInput = {
    id?: SortOrder
    creation_user_id?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    value_of_thousand_in_cents?: SortOrder
    User?: UserOrderByWithRelationInput
    Client?: ClientOrderByWithRelationInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsOrderByRelationAggregateInput
    ReportsDistributions?: ReportsDistributionsOrderByWithRelationInput
  }

  export type AuthorizationOfDistributionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuthorizationOfDistributionWhereInput | AuthorizationOfDistributionWhereInput[]
    OR?: AuthorizationOfDistributionWhereInput[]
    NOT?: AuthorizationOfDistributionWhereInput | AuthorizationOfDistributionWhereInput[]
    creation_user_id?: StringFilter<"AuthorizationOfDistribution"> | string
    client_id?: StringFilter<"AuthorizationOfDistribution"> | string
    created_at?: DateTimeFilter<"AuthorizationOfDistribution"> | Date | string
    value_of_thousand_in_cents?: IntFilter<"AuthorizationOfDistribution"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    Client?: XOR<ClientRelationFilter, ClientWhereInput>
    AuthorizationsHasSectors?: AuthorizationsHasSectorsListRelationFilter
    ReportsDistributions?: XOR<ReportsDistributionsNullableRelationFilter, ReportsDistributionsWhereInput> | null
  }, "id">

  export type AuthorizationOfDistributionOrderByWithAggregationInput = {
    id?: SortOrder
    creation_user_id?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    value_of_thousand_in_cents?: SortOrder
    _count?: AuthorizationOfDistributionCountOrderByAggregateInput
    _avg?: AuthorizationOfDistributionAvgOrderByAggregateInput
    _max?: AuthorizationOfDistributionMaxOrderByAggregateInput
    _min?: AuthorizationOfDistributionMinOrderByAggregateInput
    _sum?: AuthorizationOfDistributionSumOrderByAggregateInput
  }

  export type AuthorizationOfDistributionScalarWhereWithAggregatesInput = {
    AND?: AuthorizationOfDistributionScalarWhereWithAggregatesInput | AuthorizationOfDistributionScalarWhereWithAggregatesInput[]
    OR?: AuthorizationOfDistributionScalarWhereWithAggregatesInput[]
    NOT?: AuthorizationOfDistributionScalarWhereWithAggregatesInput | AuthorizationOfDistributionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuthorizationOfDistribution"> | string
    creation_user_id?: StringWithAggregatesFilter<"AuthorizationOfDistribution"> | string
    client_id?: StringWithAggregatesFilter<"AuthorizationOfDistribution"> | string
    created_at?: DateTimeWithAggregatesFilter<"AuthorizationOfDistribution"> | Date | string
    value_of_thousand_in_cents?: IntWithAggregatesFilter<"AuthorizationOfDistribution"> | number
  }

  export type AuthorizationsHasSectorsWhereInput = {
    AND?: AuthorizationsHasSectorsWhereInput | AuthorizationsHasSectorsWhereInput[]
    OR?: AuthorizationsHasSectorsWhereInput[]
    NOT?: AuthorizationsHasSectorsWhereInput | AuthorizationsHasSectorsWhereInput[]
    id?: StringFilter<"AuthorizationsHasSectors"> | string
    sector_id?: StringFilter<"AuthorizationsHasSectors"> | string
    authorization_of_distribution_id?: StringFilter<"AuthorizationsHasSectors"> | string
    userId?: StringNullableFilter<"AuthorizationsHasSectors"> | string | null
    AuthorizationsDistributions?: XOR<AuthorizationOfDistributionRelationFilter, AuthorizationOfDistributionWhereInput>
    Sector?: XOR<SectorRelationFilter, SectorWhereInput>
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AuthorizationsHasSectorsOrderByWithRelationInput = {
    id?: SortOrder
    sector_id?: SortOrder
    authorization_of_distribution_id?: SortOrder
    userId?: SortOrderInput | SortOrder
    AuthorizationsDistributions?: AuthorizationOfDistributionOrderByWithRelationInput
    Sector?: SectorOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type AuthorizationsHasSectorsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuthorizationsHasSectorsWhereInput | AuthorizationsHasSectorsWhereInput[]
    OR?: AuthorizationsHasSectorsWhereInput[]
    NOT?: AuthorizationsHasSectorsWhereInput | AuthorizationsHasSectorsWhereInput[]
    sector_id?: StringFilter<"AuthorizationsHasSectors"> | string
    authorization_of_distribution_id?: StringFilter<"AuthorizationsHasSectors"> | string
    userId?: StringNullableFilter<"AuthorizationsHasSectors"> | string | null
    AuthorizationsDistributions?: XOR<AuthorizationOfDistributionRelationFilter, AuthorizationOfDistributionWhereInput>
    Sector?: XOR<SectorRelationFilter, SectorWhereInput>
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuthorizationsHasSectorsOrderByWithAggregationInput = {
    id?: SortOrder
    sector_id?: SortOrder
    authorization_of_distribution_id?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: AuthorizationsHasSectorsCountOrderByAggregateInput
    _max?: AuthorizationsHasSectorsMaxOrderByAggregateInput
    _min?: AuthorizationsHasSectorsMinOrderByAggregateInput
  }

  export type AuthorizationsHasSectorsScalarWhereWithAggregatesInput = {
    AND?: AuthorizationsHasSectorsScalarWhereWithAggregatesInput | AuthorizationsHasSectorsScalarWhereWithAggregatesInput[]
    OR?: AuthorizationsHasSectorsScalarWhereWithAggregatesInput[]
    NOT?: AuthorizationsHasSectorsScalarWhereWithAggregatesInput | AuthorizationsHasSectorsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuthorizationsHasSectors"> | string
    sector_id?: StringWithAggregatesFilter<"AuthorizationsHasSectors"> | string
    authorization_of_distribution_id?: StringWithAggregatesFilter<"AuthorizationsHasSectors"> | string
    userId?: StringNullableWithAggregatesFilter<"AuthorizationsHasSectors"> | string | null
  }

  export type ReportsDistributionsWhereInput = {
    AND?: ReportsDistributionsWhereInput | ReportsDistributionsWhereInput[]
    OR?: ReportsDistributionsWhereInput[]
    NOT?: ReportsDistributionsWhereInput | ReportsDistributionsWhereInput[]
    id?: StringFilter<"ReportsDistributions"> | string
    created_at?: DateTimeFilter<"ReportsDistributions"> | Date | string
    first_photo_url?: StringFilter<"ReportsDistributions"> | string
    second_photo_url?: StringFilter<"ReportsDistributions"> | string
    third_photo_url?: StringFilter<"ReportsDistributions"> | string
    user_created_id?: StringFilter<"ReportsDistributions"> | string
    authorization_id?: StringFilter<"ReportsDistributions"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Authorization?: XOR<AuthorizationOfDistributionRelationFilter, AuthorizationOfDistributionWhereInput>
  }

  export type ReportsDistributionsOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    first_photo_url?: SortOrder
    second_photo_url?: SortOrder
    third_photo_url?: SortOrder
    user_created_id?: SortOrder
    authorization_id?: SortOrder
    User?: UserOrderByWithRelationInput
    Authorization?: AuthorizationOfDistributionOrderByWithRelationInput
  }

  export type ReportsDistributionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    authorization_id?: string
    AND?: ReportsDistributionsWhereInput | ReportsDistributionsWhereInput[]
    OR?: ReportsDistributionsWhereInput[]
    NOT?: ReportsDistributionsWhereInput | ReportsDistributionsWhereInput[]
    created_at?: DateTimeFilter<"ReportsDistributions"> | Date | string
    first_photo_url?: StringFilter<"ReportsDistributions"> | string
    second_photo_url?: StringFilter<"ReportsDistributions"> | string
    third_photo_url?: StringFilter<"ReportsDistributions"> | string
    user_created_id?: StringFilter<"ReportsDistributions"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Authorization?: XOR<AuthorizationOfDistributionRelationFilter, AuthorizationOfDistributionWhereInput>
  }, "id" | "authorization_id">

  export type ReportsDistributionsOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    first_photo_url?: SortOrder
    second_photo_url?: SortOrder
    third_photo_url?: SortOrder
    user_created_id?: SortOrder
    authorization_id?: SortOrder
    _count?: ReportsDistributionsCountOrderByAggregateInput
    _max?: ReportsDistributionsMaxOrderByAggregateInput
    _min?: ReportsDistributionsMinOrderByAggregateInput
  }

  export type ReportsDistributionsScalarWhereWithAggregatesInput = {
    AND?: ReportsDistributionsScalarWhereWithAggregatesInput | ReportsDistributionsScalarWhereWithAggregatesInput[]
    OR?: ReportsDistributionsScalarWhereWithAggregatesInput[]
    NOT?: ReportsDistributionsScalarWhereWithAggregatesInput | ReportsDistributionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportsDistributions"> | string
    created_at?: DateTimeWithAggregatesFilter<"ReportsDistributions"> | Date | string
    first_photo_url?: StringWithAggregatesFilter<"ReportsDistributions"> | string
    second_photo_url?: StringWithAggregatesFilter<"ReportsDistributions"> | string
    third_photo_url?: StringWithAggregatesFilter<"ReportsDistributions"> | string
    user_created_id?: StringWithAggregatesFilter<"ReportsDistributions"> | string
    authorization_id?: StringWithAggregatesFilter<"ReportsDistributions"> | string
  }

  export type SectorWhereInput = {
    AND?: SectorWhereInput | SectorWhereInput[]
    OR?: SectorWhereInput[]
    NOT?: SectorWhereInput | SectorWhereInput[]
    id?: StringFilter<"Sector"> | string
    name?: StringFilter<"Sector"> | string
    AuthorizationsHasSectors?: AuthorizationsHasSectorsListRelationFilter
  }

  export type SectorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    AuthorizationsHasSectors?: AuthorizationsHasSectorsOrderByRelationAggregateInput
  }

  export type SectorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: SectorWhereInput | SectorWhereInput[]
    OR?: SectorWhereInput[]
    NOT?: SectorWhereInput | SectorWhereInput[]
    AuthorizationsHasSectors?: AuthorizationsHasSectorsListRelationFilter
  }, "id" | "name">

  export type SectorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: SectorCountOrderByAggregateInput
    _max?: SectorMaxOrderByAggregateInput
    _min?: SectorMinOrderByAggregateInput
  }

  export type SectorScalarWhereWithAggregatesInput = {
    AND?: SectorScalarWhereWithAggregatesInput | SectorScalarWhereWithAggregatesInput[]
    OR?: SectorScalarWhereWithAggregatesInput[]
    NOT?: SectorScalarWhereWithAggregatesInput | SectorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sector"> | string
    name?: StringWithAggregatesFilter<"Sector"> | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
    Client?: ClientCreateNestedManyWithoutUserInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionCreateNestedManyWithoutUserInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsCreateNestedManyWithoutUserInput
    ReportsDistributions?: ReportsDistributionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
    Client?: ClientUncheckedCreateNestedManyWithoutUserInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUncheckedCreateNestedManyWithoutUserInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutUserInput
    ReportsDistributions?: ReportsDistributionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    Client?: ClientUpdateManyWithoutUserNestedInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUpdateManyWithoutUserNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUpdateManyWithoutUserNestedInput
    ReportsDistributions?: ReportsDistributionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    Client?: ClientUncheckedUpdateManyWithoutUserNestedInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUncheckedUpdateManyWithoutUserNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedUpdateManyWithoutUserNestedInput
    ReportsDistributions?: ReportsDistributionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type ClientCreateInput = {
    id?: string
    socialName: string
    email: string
    phone: string
    cnpj: string
    created_at?: Date | string
    updated_at?: Date | string | null
    User: UserCreateNestedOneWithoutClientInput
    DistributionAuthorization?: AuthorizationOfDistributionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: string
    socialName: string
    email: string
    phone: string
    cnpj: string
    user_created_id: string
    created_at?: Date | string
    updated_at?: Date | string | null
    DistributionAuthorization?: AuthorizationOfDistributionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutClientNestedInput
    DistributionAuthorization?: AuthorizationOfDistributionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    user_created_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DistributionAuthorization?: AuthorizationOfDistributionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: string
    socialName: string
    email: string
    phone: string
    cnpj: string
    user_created_id: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ClientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    user_created_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthorizationOfDistributionCreateInput = {
    id?: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
    User: UserCreateNestedOneWithoutDistribuitionsAuthorizationsInput
    Client: ClientCreateNestedOneWithoutDistributionAuthorizationInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsCreateNestedManyWithoutAuthorizationsDistributionsInput
    ReportsDistributions?: ReportsDistributionsCreateNestedOneWithoutAuthorizationInput
  }

  export type AuthorizationOfDistributionUncheckedCreateInput = {
    id?: string
    creation_user_id: string
    client_id: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutAuthorizationsDistributionsInput
    ReportsDistributions?: ReportsDistributionsUncheckedCreateNestedOneWithoutAuthorizationInput
  }

  export type AuthorizationOfDistributionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutDistribuitionsAuthorizationsNestedInput
    Client?: ClientUpdateOneRequiredWithoutDistributionAuthorizationNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUpdateManyWithoutAuthorizationsDistributionsNestedInput
    ReportsDistributions?: ReportsDistributionsUpdateOneWithoutAuthorizationNestedInput
  }

  export type AuthorizationOfDistributionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    creation_user_id?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedUpdateManyWithoutAuthorizationsDistributionsNestedInput
    ReportsDistributions?: ReportsDistributionsUncheckedUpdateOneWithoutAuthorizationNestedInput
  }

  export type AuthorizationOfDistributionCreateManyInput = {
    id?: string
    creation_user_id: string
    client_id: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
  }

  export type AuthorizationOfDistributionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
  }

  export type AuthorizationOfDistributionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    creation_user_id?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
  }

  export type AuthorizationsHasSectorsCreateInput = {
    id?: string
    AuthorizationsDistributions: AuthorizationOfDistributionCreateNestedOneWithoutAuthorizationsHasSectorsInput
    Sector: SectorCreateNestedOneWithoutAuthorizationsHasSectorsInput
    User?: UserCreateNestedOneWithoutAuthorizationsHasSectorsInput
  }

  export type AuthorizationsHasSectorsUncheckedCreateInput = {
    id?: string
    sector_id: string
    authorization_of_distribution_id: string
    userId?: string | null
  }

  export type AuthorizationsHasSectorsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    AuthorizationsDistributions?: AuthorizationOfDistributionUpdateOneRequiredWithoutAuthorizationsHasSectorsNestedInput
    Sector?: SectorUpdateOneRequiredWithoutAuthorizationsHasSectorsNestedInput
    User?: UserUpdateOneWithoutAuthorizationsHasSectorsNestedInput
  }

  export type AuthorizationsHasSectorsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sector_id?: StringFieldUpdateOperationsInput | string
    authorization_of_distribution_id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthorizationsHasSectorsCreateManyInput = {
    id?: string
    sector_id: string
    authorization_of_distribution_id: string
    userId?: string | null
  }

  export type AuthorizationsHasSectorsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AuthorizationsHasSectorsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sector_id?: StringFieldUpdateOperationsInput | string
    authorization_of_distribution_id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportsDistributionsCreateInput = {
    id?: string
    created_at?: Date | string
    first_photo_url: string
    second_photo_url: string
    third_photo_url: string
    User: UserCreateNestedOneWithoutReportsDistributionsInput
    Authorization: AuthorizationOfDistributionCreateNestedOneWithoutReportsDistributionsInput
  }

  export type ReportsDistributionsUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    first_photo_url: string
    second_photo_url: string
    third_photo_url: string
    user_created_id: string
    authorization_id: string
  }

  export type ReportsDistributionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    first_photo_url?: StringFieldUpdateOperationsInput | string
    second_photo_url?: StringFieldUpdateOperationsInput | string
    third_photo_url?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutReportsDistributionsNestedInput
    Authorization?: AuthorizationOfDistributionUpdateOneRequiredWithoutReportsDistributionsNestedInput
  }

  export type ReportsDistributionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    first_photo_url?: StringFieldUpdateOperationsInput | string
    second_photo_url?: StringFieldUpdateOperationsInput | string
    third_photo_url?: StringFieldUpdateOperationsInput | string
    user_created_id?: StringFieldUpdateOperationsInput | string
    authorization_id?: StringFieldUpdateOperationsInput | string
  }

  export type ReportsDistributionsCreateManyInput = {
    id?: string
    created_at?: Date | string
    first_photo_url: string
    second_photo_url: string
    third_photo_url: string
    user_created_id: string
    authorization_id: string
  }

  export type ReportsDistributionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    first_photo_url?: StringFieldUpdateOperationsInput | string
    second_photo_url?: StringFieldUpdateOperationsInput | string
    third_photo_url?: StringFieldUpdateOperationsInput | string
  }

  export type ReportsDistributionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    first_photo_url?: StringFieldUpdateOperationsInput | string
    second_photo_url?: StringFieldUpdateOperationsInput | string
    third_photo_url?: StringFieldUpdateOperationsInput | string
    user_created_id?: StringFieldUpdateOperationsInput | string
    authorization_id?: StringFieldUpdateOperationsInput | string
  }

  export type SectorCreateInput = {
    id?: string
    name: string
    AuthorizationsHasSectors?: AuthorizationsHasSectorsCreateNestedManyWithoutSectorInput
  }

  export type SectorUncheckedCreateInput = {
    id?: string
    name: string
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutSectorInput
  }

  export type SectorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUpdateManyWithoutSectorNestedInput
  }

  export type SectorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedUpdateManyWithoutSectorNestedInput
  }

  export type SectorCreateManyInput = {
    id?: string
    name: string
  }

  export type SectorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type ClientListRelationFilter = {
    every?: ClientWhereInput
    some?: ClientWhereInput
    none?: ClientWhereInput
  }

  export type AuthorizationOfDistributionListRelationFilter = {
    every?: AuthorizationOfDistributionWhereInput
    some?: AuthorizationOfDistributionWhereInput
    none?: AuthorizationOfDistributionWhereInput
  }

  export type AuthorizationsHasSectorsListRelationFilter = {
    every?: AuthorizationsHasSectorsWhereInput
    some?: AuthorizationsHasSectorsWhereInput
    none?: AuthorizationsHasSectorsWhereInput
  }

  export type ReportsDistributionsListRelationFilter = {
    every?: ReportsDistributionsWhereInput
    some?: ReportsDistributionsWhereInput
    none?: ReportsDistributionsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ClientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuthorizationOfDistributionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuthorizationsHasSectorsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportsDistributionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf_number?: SortOrder
    work_card_number?: SortOrder
    office?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf_number?: SortOrder
    work_card_number?: SortOrder
    office?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf_number?: SortOrder
    work_card_number?: SortOrder
    office?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    socialName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    cnpj?: SortOrder
    user_created_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    socialName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    cnpj?: SortOrder
    user_created_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    socialName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    cnpj?: SortOrder
    user_created_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ClientRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type ReportsDistributionsNullableRelationFilter = {
    is?: ReportsDistributionsWhereInput | null
    isNot?: ReportsDistributionsWhereInput | null
  }

  export type AuthorizationOfDistributionCountOrderByAggregateInput = {
    id?: SortOrder
    creation_user_id?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    value_of_thousand_in_cents?: SortOrder
  }

  export type AuthorizationOfDistributionAvgOrderByAggregateInput = {
    value_of_thousand_in_cents?: SortOrder
  }

  export type AuthorizationOfDistributionMaxOrderByAggregateInput = {
    id?: SortOrder
    creation_user_id?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    value_of_thousand_in_cents?: SortOrder
  }

  export type AuthorizationOfDistributionMinOrderByAggregateInput = {
    id?: SortOrder
    creation_user_id?: SortOrder
    client_id?: SortOrder
    created_at?: SortOrder
    value_of_thousand_in_cents?: SortOrder
  }

  export type AuthorizationOfDistributionSumOrderByAggregateInput = {
    value_of_thousand_in_cents?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AuthorizationOfDistributionRelationFilter = {
    is?: AuthorizationOfDistributionWhereInput
    isNot?: AuthorizationOfDistributionWhereInput
  }

  export type SectorRelationFilter = {
    is?: SectorWhereInput
    isNot?: SectorWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AuthorizationsHasSectorsCountOrderByAggregateInput = {
    id?: SortOrder
    sector_id?: SortOrder
    authorization_of_distribution_id?: SortOrder
    userId?: SortOrder
  }

  export type AuthorizationsHasSectorsMaxOrderByAggregateInput = {
    id?: SortOrder
    sector_id?: SortOrder
    authorization_of_distribution_id?: SortOrder
    userId?: SortOrder
  }

  export type AuthorizationsHasSectorsMinOrderByAggregateInput = {
    id?: SortOrder
    sector_id?: SortOrder
    authorization_of_distribution_id?: SortOrder
    userId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ReportsDistributionsCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    first_photo_url?: SortOrder
    second_photo_url?: SortOrder
    third_photo_url?: SortOrder
    user_created_id?: SortOrder
    authorization_id?: SortOrder
  }

  export type ReportsDistributionsMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    first_photo_url?: SortOrder
    second_photo_url?: SortOrder
    third_photo_url?: SortOrder
    user_created_id?: SortOrder
    authorization_id?: SortOrder
  }

  export type ReportsDistributionsMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    first_photo_url?: SortOrder
    second_photo_url?: SortOrder
    third_photo_url?: SortOrder
    user_created_id?: SortOrder
    authorization_id?: SortOrder
  }

  export type SectorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SectorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SectorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClientCreateNestedManyWithoutUserInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput> | ClientCreateWithoutUserInput[] | ClientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput | ClientCreateOrConnectWithoutUserInput[]
    createMany?: ClientCreateManyUserInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type AuthorizationOfDistributionCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutUserInput, AuthorizationOfDistributionUncheckedCreateWithoutUserInput> | AuthorizationOfDistributionCreateWithoutUserInput[] | AuthorizationOfDistributionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutUserInput | AuthorizationOfDistributionCreateOrConnectWithoutUserInput[]
    createMany?: AuthorizationOfDistributionCreateManyUserInputEnvelope
    connect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
  }

  export type AuthorizationsHasSectorsCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutUserInput, AuthorizationsHasSectorsUncheckedCreateWithoutUserInput> | AuthorizationsHasSectorsCreateWithoutUserInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutUserInput | AuthorizationsHasSectorsCreateOrConnectWithoutUserInput[]
    createMany?: AuthorizationsHasSectorsCreateManyUserInputEnvelope
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
  }

  export type ReportsDistributionsCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportsDistributionsCreateWithoutUserInput, ReportsDistributionsUncheckedCreateWithoutUserInput> | ReportsDistributionsCreateWithoutUserInput[] | ReportsDistributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportsDistributionsCreateOrConnectWithoutUserInput | ReportsDistributionsCreateOrConnectWithoutUserInput[]
    createMany?: ReportsDistributionsCreateManyUserInputEnvelope
    connect?: ReportsDistributionsWhereUniqueInput | ReportsDistributionsWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput> | ClientCreateWithoutUserInput[] | ClientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput | ClientCreateOrConnectWithoutUserInput[]
    createMany?: ClientCreateManyUserInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type AuthorizationOfDistributionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutUserInput, AuthorizationOfDistributionUncheckedCreateWithoutUserInput> | AuthorizationOfDistributionCreateWithoutUserInput[] | AuthorizationOfDistributionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutUserInput | AuthorizationOfDistributionCreateOrConnectWithoutUserInput[]
    createMany?: AuthorizationOfDistributionCreateManyUserInputEnvelope
    connect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
  }

  export type AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutUserInput, AuthorizationsHasSectorsUncheckedCreateWithoutUserInput> | AuthorizationsHasSectorsCreateWithoutUserInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutUserInput | AuthorizationsHasSectorsCreateOrConnectWithoutUserInput[]
    createMany?: AuthorizationsHasSectorsCreateManyUserInputEnvelope
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
  }

  export type ReportsDistributionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportsDistributionsCreateWithoutUserInput, ReportsDistributionsUncheckedCreateWithoutUserInput> | ReportsDistributionsCreateWithoutUserInput[] | ReportsDistributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportsDistributionsCreateOrConnectWithoutUserInput | ReportsDistributionsCreateOrConnectWithoutUserInput[]
    createMany?: ReportsDistributionsCreateManyUserInputEnvelope
    connect?: ReportsDistributionsWhereUniqueInput | ReportsDistributionsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type ClientUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput> | ClientCreateWithoutUserInput[] | ClientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput | ClientCreateOrConnectWithoutUserInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutUserInput | ClientUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClientCreateManyUserInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutUserInput | ClientUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutUserInput | ClientUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type AuthorizationOfDistributionUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutUserInput, AuthorizationOfDistributionUncheckedCreateWithoutUserInput> | AuthorizationOfDistributionCreateWithoutUserInput[] | AuthorizationOfDistributionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutUserInput | AuthorizationOfDistributionCreateOrConnectWithoutUserInput[]
    upsert?: AuthorizationOfDistributionUpsertWithWhereUniqueWithoutUserInput | AuthorizationOfDistributionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthorizationOfDistributionCreateManyUserInputEnvelope
    set?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    disconnect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    delete?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    connect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    update?: AuthorizationOfDistributionUpdateWithWhereUniqueWithoutUserInput | AuthorizationOfDistributionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthorizationOfDistributionUpdateManyWithWhereWithoutUserInput | AuthorizationOfDistributionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthorizationOfDistributionScalarWhereInput | AuthorizationOfDistributionScalarWhereInput[]
  }

  export type AuthorizationsHasSectorsUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutUserInput, AuthorizationsHasSectorsUncheckedCreateWithoutUserInput> | AuthorizationsHasSectorsCreateWithoutUserInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutUserInput | AuthorizationsHasSectorsCreateOrConnectWithoutUserInput[]
    upsert?: AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutUserInput | AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthorizationsHasSectorsCreateManyUserInputEnvelope
    set?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    disconnect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    delete?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    update?: AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutUserInput | AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthorizationsHasSectorsUpdateManyWithWhereWithoutUserInput | AuthorizationsHasSectorsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthorizationsHasSectorsScalarWhereInput | AuthorizationsHasSectorsScalarWhereInput[]
  }

  export type ReportsDistributionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportsDistributionsCreateWithoutUserInput, ReportsDistributionsUncheckedCreateWithoutUserInput> | ReportsDistributionsCreateWithoutUserInput[] | ReportsDistributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportsDistributionsCreateOrConnectWithoutUserInput | ReportsDistributionsCreateOrConnectWithoutUserInput[]
    upsert?: ReportsDistributionsUpsertWithWhereUniqueWithoutUserInput | ReportsDistributionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportsDistributionsCreateManyUserInputEnvelope
    set?: ReportsDistributionsWhereUniqueInput | ReportsDistributionsWhereUniqueInput[]
    disconnect?: ReportsDistributionsWhereUniqueInput | ReportsDistributionsWhereUniqueInput[]
    delete?: ReportsDistributionsWhereUniqueInput | ReportsDistributionsWhereUniqueInput[]
    connect?: ReportsDistributionsWhereUniqueInput | ReportsDistributionsWhereUniqueInput[]
    update?: ReportsDistributionsUpdateWithWhereUniqueWithoutUserInput | ReportsDistributionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportsDistributionsUpdateManyWithWhereWithoutUserInput | ReportsDistributionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportsDistributionsScalarWhereInput | ReportsDistributionsScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput> | ClientCreateWithoutUserInput[] | ClientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput | ClientCreateOrConnectWithoutUserInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutUserInput | ClientUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClientCreateManyUserInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutUserInput | ClientUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutUserInput | ClientUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type AuthorizationOfDistributionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutUserInput, AuthorizationOfDistributionUncheckedCreateWithoutUserInput> | AuthorizationOfDistributionCreateWithoutUserInput[] | AuthorizationOfDistributionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutUserInput | AuthorizationOfDistributionCreateOrConnectWithoutUserInput[]
    upsert?: AuthorizationOfDistributionUpsertWithWhereUniqueWithoutUserInput | AuthorizationOfDistributionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthorizationOfDistributionCreateManyUserInputEnvelope
    set?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    disconnect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    delete?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    connect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    update?: AuthorizationOfDistributionUpdateWithWhereUniqueWithoutUserInput | AuthorizationOfDistributionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthorizationOfDistributionUpdateManyWithWhereWithoutUserInput | AuthorizationOfDistributionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthorizationOfDistributionScalarWhereInput | AuthorizationOfDistributionScalarWhereInput[]
  }

  export type AuthorizationsHasSectorsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutUserInput, AuthorizationsHasSectorsUncheckedCreateWithoutUserInput> | AuthorizationsHasSectorsCreateWithoutUserInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutUserInput | AuthorizationsHasSectorsCreateOrConnectWithoutUserInput[]
    upsert?: AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutUserInput | AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthorizationsHasSectorsCreateManyUserInputEnvelope
    set?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    disconnect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    delete?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    update?: AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutUserInput | AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthorizationsHasSectorsUpdateManyWithWhereWithoutUserInput | AuthorizationsHasSectorsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthorizationsHasSectorsScalarWhereInput | AuthorizationsHasSectorsScalarWhereInput[]
  }

  export type ReportsDistributionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportsDistributionsCreateWithoutUserInput, ReportsDistributionsUncheckedCreateWithoutUserInput> | ReportsDistributionsCreateWithoutUserInput[] | ReportsDistributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportsDistributionsCreateOrConnectWithoutUserInput | ReportsDistributionsCreateOrConnectWithoutUserInput[]
    upsert?: ReportsDistributionsUpsertWithWhereUniqueWithoutUserInput | ReportsDistributionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportsDistributionsCreateManyUserInputEnvelope
    set?: ReportsDistributionsWhereUniqueInput | ReportsDistributionsWhereUniqueInput[]
    disconnect?: ReportsDistributionsWhereUniqueInput | ReportsDistributionsWhereUniqueInput[]
    delete?: ReportsDistributionsWhereUniqueInput | ReportsDistributionsWhereUniqueInput[]
    connect?: ReportsDistributionsWhereUniqueInput | ReportsDistributionsWhereUniqueInput[]
    update?: ReportsDistributionsUpdateWithWhereUniqueWithoutUserInput | ReportsDistributionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportsDistributionsUpdateManyWithWhereWithoutUserInput | ReportsDistributionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportsDistributionsScalarWhereInput | ReportsDistributionsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutClientInput = {
    create?: XOR<UserCreateWithoutClientInput, UserUncheckedCreateWithoutClientInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientInput
    connect?: UserWhereUniqueInput
  }

  export type AuthorizationOfDistributionCreateNestedManyWithoutClientInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutClientInput, AuthorizationOfDistributionUncheckedCreateWithoutClientInput> | AuthorizationOfDistributionCreateWithoutClientInput[] | AuthorizationOfDistributionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutClientInput | AuthorizationOfDistributionCreateOrConnectWithoutClientInput[]
    createMany?: AuthorizationOfDistributionCreateManyClientInputEnvelope
    connect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
  }

  export type AuthorizationOfDistributionUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutClientInput, AuthorizationOfDistributionUncheckedCreateWithoutClientInput> | AuthorizationOfDistributionCreateWithoutClientInput[] | AuthorizationOfDistributionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutClientInput | AuthorizationOfDistributionCreateOrConnectWithoutClientInput[]
    createMany?: AuthorizationOfDistributionCreateManyClientInputEnvelope
    connect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutClientNestedInput = {
    create?: XOR<UserCreateWithoutClientInput, UserUncheckedCreateWithoutClientInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientInput
    upsert?: UserUpsertWithoutClientInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClientInput, UserUpdateWithoutClientInput>, UserUncheckedUpdateWithoutClientInput>
  }

  export type AuthorizationOfDistributionUpdateManyWithoutClientNestedInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutClientInput, AuthorizationOfDistributionUncheckedCreateWithoutClientInput> | AuthorizationOfDistributionCreateWithoutClientInput[] | AuthorizationOfDistributionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutClientInput | AuthorizationOfDistributionCreateOrConnectWithoutClientInput[]
    upsert?: AuthorizationOfDistributionUpsertWithWhereUniqueWithoutClientInput | AuthorizationOfDistributionUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: AuthorizationOfDistributionCreateManyClientInputEnvelope
    set?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    disconnect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    delete?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    connect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    update?: AuthorizationOfDistributionUpdateWithWhereUniqueWithoutClientInput | AuthorizationOfDistributionUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: AuthorizationOfDistributionUpdateManyWithWhereWithoutClientInput | AuthorizationOfDistributionUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: AuthorizationOfDistributionScalarWhereInput | AuthorizationOfDistributionScalarWhereInput[]
  }

  export type AuthorizationOfDistributionUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutClientInput, AuthorizationOfDistributionUncheckedCreateWithoutClientInput> | AuthorizationOfDistributionCreateWithoutClientInput[] | AuthorizationOfDistributionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutClientInput | AuthorizationOfDistributionCreateOrConnectWithoutClientInput[]
    upsert?: AuthorizationOfDistributionUpsertWithWhereUniqueWithoutClientInput | AuthorizationOfDistributionUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: AuthorizationOfDistributionCreateManyClientInputEnvelope
    set?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    disconnect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    delete?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    connect?: AuthorizationOfDistributionWhereUniqueInput | AuthorizationOfDistributionWhereUniqueInput[]
    update?: AuthorizationOfDistributionUpdateWithWhereUniqueWithoutClientInput | AuthorizationOfDistributionUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: AuthorizationOfDistributionUpdateManyWithWhereWithoutClientInput | AuthorizationOfDistributionUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: AuthorizationOfDistributionScalarWhereInput | AuthorizationOfDistributionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDistribuitionsAuthorizationsInput = {
    create?: XOR<UserCreateWithoutDistribuitionsAuthorizationsInput, UserUncheckedCreateWithoutDistribuitionsAuthorizationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDistribuitionsAuthorizationsInput
    connect?: UserWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutDistributionAuthorizationInput = {
    create?: XOR<ClientCreateWithoutDistributionAuthorizationInput, ClientUncheckedCreateWithoutDistributionAuthorizationInput>
    connectOrCreate?: ClientCreateOrConnectWithoutDistributionAuthorizationInput
    connect?: ClientWhereUniqueInput
  }

  export type AuthorizationsHasSectorsCreateNestedManyWithoutAuthorizationsDistributionsInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput, AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput> | AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutAuthorizationsDistributionsInput | AuthorizationsHasSectorsCreateOrConnectWithoutAuthorizationsDistributionsInput[]
    createMany?: AuthorizationsHasSectorsCreateManyAuthorizationsDistributionsInputEnvelope
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
  }

  export type ReportsDistributionsCreateNestedOneWithoutAuthorizationInput = {
    create?: XOR<ReportsDistributionsCreateWithoutAuthorizationInput, ReportsDistributionsUncheckedCreateWithoutAuthorizationInput>
    connectOrCreate?: ReportsDistributionsCreateOrConnectWithoutAuthorizationInput
    connect?: ReportsDistributionsWhereUniqueInput
  }

  export type AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutAuthorizationsDistributionsInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput, AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput> | AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutAuthorizationsDistributionsInput | AuthorizationsHasSectorsCreateOrConnectWithoutAuthorizationsDistributionsInput[]
    createMany?: AuthorizationsHasSectorsCreateManyAuthorizationsDistributionsInputEnvelope
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
  }

  export type ReportsDistributionsUncheckedCreateNestedOneWithoutAuthorizationInput = {
    create?: XOR<ReportsDistributionsCreateWithoutAuthorizationInput, ReportsDistributionsUncheckedCreateWithoutAuthorizationInput>
    connectOrCreate?: ReportsDistributionsCreateOrConnectWithoutAuthorizationInput
    connect?: ReportsDistributionsWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutDistribuitionsAuthorizationsNestedInput = {
    create?: XOR<UserCreateWithoutDistribuitionsAuthorizationsInput, UserUncheckedCreateWithoutDistribuitionsAuthorizationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDistribuitionsAuthorizationsInput
    upsert?: UserUpsertWithoutDistribuitionsAuthorizationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDistribuitionsAuthorizationsInput, UserUpdateWithoutDistribuitionsAuthorizationsInput>, UserUncheckedUpdateWithoutDistribuitionsAuthorizationsInput>
  }

  export type ClientUpdateOneRequiredWithoutDistributionAuthorizationNestedInput = {
    create?: XOR<ClientCreateWithoutDistributionAuthorizationInput, ClientUncheckedCreateWithoutDistributionAuthorizationInput>
    connectOrCreate?: ClientCreateOrConnectWithoutDistributionAuthorizationInput
    upsert?: ClientUpsertWithoutDistributionAuthorizationInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutDistributionAuthorizationInput, ClientUpdateWithoutDistributionAuthorizationInput>, ClientUncheckedUpdateWithoutDistributionAuthorizationInput>
  }

  export type AuthorizationsHasSectorsUpdateManyWithoutAuthorizationsDistributionsNestedInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput, AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput> | AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutAuthorizationsDistributionsInput | AuthorizationsHasSectorsCreateOrConnectWithoutAuthorizationsDistributionsInput[]
    upsert?: AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutAuthorizationsDistributionsInput | AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutAuthorizationsDistributionsInput[]
    createMany?: AuthorizationsHasSectorsCreateManyAuthorizationsDistributionsInputEnvelope
    set?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    disconnect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    delete?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    update?: AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutAuthorizationsDistributionsInput | AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutAuthorizationsDistributionsInput[]
    updateMany?: AuthorizationsHasSectorsUpdateManyWithWhereWithoutAuthorizationsDistributionsInput | AuthorizationsHasSectorsUpdateManyWithWhereWithoutAuthorizationsDistributionsInput[]
    deleteMany?: AuthorizationsHasSectorsScalarWhereInput | AuthorizationsHasSectorsScalarWhereInput[]
  }

  export type ReportsDistributionsUpdateOneWithoutAuthorizationNestedInput = {
    create?: XOR<ReportsDistributionsCreateWithoutAuthorizationInput, ReportsDistributionsUncheckedCreateWithoutAuthorizationInput>
    connectOrCreate?: ReportsDistributionsCreateOrConnectWithoutAuthorizationInput
    upsert?: ReportsDistributionsUpsertWithoutAuthorizationInput
    disconnect?: ReportsDistributionsWhereInput | boolean
    delete?: ReportsDistributionsWhereInput | boolean
    connect?: ReportsDistributionsWhereUniqueInput
    update?: XOR<XOR<ReportsDistributionsUpdateToOneWithWhereWithoutAuthorizationInput, ReportsDistributionsUpdateWithoutAuthorizationInput>, ReportsDistributionsUncheckedUpdateWithoutAuthorizationInput>
  }

  export type AuthorizationsHasSectorsUncheckedUpdateManyWithoutAuthorizationsDistributionsNestedInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput, AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput> | AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutAuthorizationsDistributionsInput | AuthorizationsHasSectorsCreateOrConnectWithoutAuthorizationsDistributionsInput[]
    upsert?: AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutAuthorizationsDistributionsInput | AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutAuthorizationsDistributionsInput[]
    createMany?: AuthorizationsHasSectorsCreateManyAuthorizationsDistributionsInputEnvelope
    set?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    disconnect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    delete?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    update?: AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutAuthorizationsDistributionsInput | AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutAuthorizationsDistributionsInput[]
    updateMany?: AuthorizationsHasSectorsUpdateManyWithWhereWithoutAuthorizationsDistributionsInput | AuthorizationsHasSectorsUpdateManyWithWhereWithoutAuthorizationsDistributionsInput[]
    deleteMany?: AuthorizationsHasSectorsScalarWhereInput | AuthorizationsHasSectorsScalarWhereInput[]
  }

  export type ReportsDistributionsUncheckedUpdateOneWithoutAuthorizationNestedInput = {
    create?: XOR<ReportsDistributionsCreateWithoutAuthorizationInput, ReportsDistributionsUncheckedCreateWithoutAuthorizationInput>
    connectOrCreate?: ReportsDistributionsCreateOrConnectWithoutAuthorizationInput
    upsert?: ReportsDistributionsUpsertWithoutAuthorizationInput
    disconnect?: ReportsDistributionsWhereInput | boolean
    delete?: ReportsDistributionsWhereInput | boolean
    connect?: ReportsDistributionsWhereUniqueInput
    update?: XOR<XOR<ReportsDistributionsUpdateToOneWithWhereWithoutAuthorizationInput, ReportsDistributionsUpdateWithoutAuthorizationInput>, ReportsDistributionsUncheckedUpdateWithoutAuthorizationInput>
  }

  export type AuthorizationOfDistributionCreateNestedOneWithoutAuthorizationsHasSectorsInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutAuthorizationsHasSectorsInput, AuthorizationOfDistributionUncheckedCreateWithoutAuthorizationsHasSectorsInput>
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutAuthorizationsHasSectorsInput
    connect?: AuthorizationOfDistributionWhereUniqueInput
  }

  export type SectorCreateNestedOneWithoutAuthorizationsHasSectorsInput = {
    create?: XOR<SectorCreateWithoutAuthorizationsHasSectorsInput, SectorUncheckedCreateWithoutAuthorizationsHasSectorsInput>
    connectOrCreate?: SectorCreateOrConnectWithoutAuthorizationsHasSectorsInput
    connect?: SectorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuthorizationsHasSectorsInput = {
    create?: XOR<UserCreateWithoutAuthorizationsHasSectorsInput, UserUncheckedCreateWithoutAuthorizationsHasSectorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthorizationsHasSectorsInput
    connect?: UserWhereUniqueInput
  }

  export type AuthorizationOfDistributionUpdateOneRequiredWithoutAuthorizationsHasSectorsNestedInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutAuthorizationsHasSectorsInput, AuthorizationOfDistributionUncheckedCreateWithoutAuthorizationsHasSectorsInput>
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutAuthorizationsHasSectorsInput
    upsert?: AuthorizationOfDistributionUpsertWithoutAuthorizationsHasSectorsInput
    connect?: AuthorizationOfDistributionWhereUniqueInput
    update?: XOR<XOR<AuthorizationOfDistributionUpdateToOneWithWhereWithoutAuthorizationsHasSectorsInput, AuthorizationOfDistributionUpdateWithoutAuthorizationsHasSectorsInput>, AuthorizationOfDistributionUncheckedUpdateWithoutAuthorizationsHasSectorsInput>
  }

  export type SectorUpdateOneRequiredWithoutAuthorizationsHasSectorsNestedInput = {
    create?: XOR<SectorCreateWithoutAuthorizationsHasSectorsInput, SectorUncheckedCreateWithoutAuthorizationsHasSectorsInput>
    connectOrCreate?: SectorCreateOrConnectWithoutAuthorizationsHasSectorsInput
    upsert?: SectorUpsertWithoutAuthorizationsHasSectorsInput
    connect?: SectorWhereUniqueInput
    update?: XOR<XOR<SectorUpdateToOneWithWhereWithoutAuthorizationsHasSectorsInput, SectorUpdateWithoutAuthorizationsHasSectorsInput>, SectorUncheckedUpdateWithoutAuthorizationsHasSectorsInput>
  }

  export type UserUpdateOneWithoutAuthorizationsHasSectorsNestedInput = {
    create?: XOR<UserCreateWithoutAuthorizationsHasSectorsInput, UserUncheckedCreateWithoutAuthorizationsHasSectorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthorizationsHasSectorsInput
    upsert?: UserUpsertWithoutAuthorizationsHasSectorsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuthorizationsHasSectorsInput, UserUpdateWithoutAuthorizationsHasSectorsInput>, UserUncheckedUpdateWithoutAuthorizationsHasSectorsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserCreateNestedOneWithoutReportsDistributionsInput = {
    create?: XOR<UserCreateWithoutReportsDistributionsInput, UserUncheckedCreateWithoutReportsDistributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsDistributionsInput
    connect?: UserWhereUniqueInput
  }

  export type AuthorizationOfDistributionCreateNestedOneWithoutReportsDistributionsInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutReportsDistributionsInput, AuthorizationOfDistributionUncheckedCreateWithoutReportsDistributionsInput>
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutReportsDistributionsInput
    connect?: AuthorizationOfDistributionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReportsDistributionsNestedInput = {
    create?: XOR<UserCreateWithoutReportsDistributionsInput, UserUncheckedCreateWithoutReportsDistributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsDistributionsInput
    upsert?: UserUpsertWithoutReportsDistributionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsDistributionsInput, UserUpdateWithoutReportsDistributionsInput>, UserUncheckedUpdateWithoutReportsDistributionsInput>
  }

  export type AuthorizationOfDistributionUpdateOneRequiredWithoutReportsDistributionsNestedInput = {
    create?: XOR<AuthorizationOfDistributionCreateWithoutReportsDistributionsInput, AuthorizationOfDistributionUncheckedCreateWithoutReportsDistributionsInput>
    connectOrCreate?: AuthorizationOfDistributionCreateOrConnectWithoutReportsDistributionsInput
    upsert?: AuthorizationOfDistributionUpsertWithoutReportsDistributionsInput
    connect?: AuthorizationOfDistributionWhereUniqueInput
    update?: XOR<XOR<AuthorizationOfDistributionUpdateToOneWithWhereWithoutReportsDistributionsInput, AuthorizationOfDistributionUpdateWithoutReportsDistributionsInput>, AuthorizationOfDistributionUncheckedUpdateWithoutReportsDistributionsInput>
  }

  export type AuthorizationsHasSectorsCreateNestedManyWithoutSectorInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutSectorInput, AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput> | AuthorizationsHasSectorsCreateWithoutSectorInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutSectorInput | AuthorizationsHasSectorsCreateOrConnectWithoutSectorInput[]
    createMany?: AuthorizationsHasSectorsCreateManySectorInputEnvelope
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
  }

  export type AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutSectorInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutSectorInput, AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput> | AuthorizationsHasSectorsCreateWithoutSectorInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutSectorInput | AuthorizationsHasSectorsCreateOrConnectWithoutSectorInput[]
    createMany?: AuthorizationsHasSectorsCreateManySectorInputEnvelope
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
  }

  export type AuthorizationsHasSectorsUpdateManyWithoutSectorNestedInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutSectorInput, AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput> | AuthorizationsHasSectorsCreateWithoutSectorInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutSectorInput | AuthorizationsHasSectorsCreateOrConnectWithoutSectorInput[]
    upsert?: AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutSectorInput | AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutSectorInput[]
    createMany?: AuthorizationsHasSectorsCreateManySectorInputEnvelope
    set?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    disconnect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    delete?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    update?: AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutSectorInput | AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutSectorInput[]
    updateMany?: AuthorizationsHasSectorsUpdateManyWithWhereWithoutSectorInput | AuthorizationsHasSectorsUpdateManyWithWhereWithoutSectorInput[]
    deleteMany?: AuthorizationsHasSectorsScalarWhereInput | AuthorizationsHasSectorsScalarWhereInput[]
  }

  export type AuthorizationsHasSectorsUncheckedUpdateManyWithoutSectorNestedInput = {
    create?: XOR<AuthorizationsHasSectorsCreateWithoutSectorInput, AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput> | AuthorizationsHasSectorsCreateWithoutSectorInput[] | AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput[]
    connectOrCreate?: AuthorizationsHasSectorsCreateOrConnectWithoutSectorInput | AuthorizationsHasSectorsCreateOrConnectWithoutSectorInput[]
    upsert?: AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutSectorInput | AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutSectorInput[]
    createMany?: AuthorizationsHasSectorsCreateManySectorInputEnvelope
    set?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    disconnect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    delete?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    connect?: AuthorizationsHasSectorsWhereUniqueInput | AuthorizationsHasSectorsWhereUniqueInput[]
    update?: AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutSectorInput | AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutSectorInput[]
    updateMany?: AuthorizationsHasSectorsUpdateManyWithWhereWithoutSectorInput | AuthorizationsHasSectorsUpdateManyWithWhereWithoutSectorInput[]
    deleteMany?: AuthorizationsHasSectorsScalarWhereInput | AuthorizationsHasSectorsScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ClientCreateWithoutUserInput = {
    id?: string
    socialName: string
    email: string
    phone: string
    cnpj: string
    created_at?: Date | string
    updated_at?: Date | string | null
    DistributionAuthorization?: AuthorizationOfDistributionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutUserInput = {
    id?: string
    socialName: string
    email: string
    phone: string
    cnpj: string
    created_at?: Date | string
    updated_at?: Date | string | null
    DistributionAuthorization?: AuthorizationOfDistributionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutUserInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput>
  }

  export type ClientCreateManyUserInputEnvelope = {
    data: ClientCreateManyUserInput | ClientCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuthorizationOfDistributionCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
    Client: ClientCreateNestedOneWithoutDistributionAuthorizationInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsCreateNestedManyWithoutAuthorizationsDistributionsInput
    ReportsDistributions?: ReportsDistributionsCreateNestedOneWithoutAuthorizationInput
  }

  export type AuthorizationOfDistributionUncheckedCreateWithoutUserInput = {
    id?: string
    client_id: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutAuthorizationsDistributionsInput
    ReportsDistributions?: ReportsDistributionsUncheckedCreateNestedOneWithoutAuthorizationInput
  }

  export type AuthorizationOfDistributionCreateOrConnectWithoutUserInput = {
    where: AuthorizationOfDistributionWhereUniqueInput
    create: XOR<AuthorizationOfDistributionCreateWithoutUserInput, AuthorizationOfDistributionUncheckedCreateWithoutUserInput>
  }

  export type AuthorizationOfDistributionCreateManyUserInputEnvelope = {
    data: AuthorizationOfDistributionCreateManyUserInput | AuthorizationOfDistributionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuthorizationsHasSectorsCreateWithoutUserInput = {
    id?: string
    AuthorizationsDistributions: AuthorizationOfDistributionCreateNestedOneWithoutAuthorizationsHasSectorsInput
    Sector: SectorCreateNestedOneWithoutAuthorizationsHasSectorsInput
  }

  export type AuthorizationsHasSectorsUncheckedCreateWithoutUserInput = {
    id?: string
    sector_id: string
    authorization_of_distribution_id: string
  }

  export type AuthorizationsHasSectorsCreateOrConnectWithoutUserInput = {
    where: AuthorizationsHasSectorsWhereUniqueInput
    create: XOR<AuthorizationsHasSectorsCreateWithoutUserInput, AuthorizationsHasSectorsUncheckedCreateWithoutUserInput>
  }

  export type AuthorizationsHasSectorsCreateManyUserInputEnvelope = {
    data: AuthorizationsHasSectorsCreateManyUserInput | AuthorizationsHasSectorsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReportsDistributionsCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    first_photo_url: string
    second_photo_url: string
    third_photo_url: string
    Authorization: AuthorizationOfDistributionCreateNestedOneWithoutReportsDistributionsInput
  }

  export type ReportsDistributionsUncheckedCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    first_photo_url: string
    second_photo_url: string
    third_photo_url: string
    authorization_id: string
  }

  export type ReportsDistributionsCreateOrConnectWithoutUserInput = {
    where: ReportsDistributionsWhereUniqueInput
    create: XOR<ReportsDistributionsCreateWithoutUserInput, ReportsDistributionsUncheckedCreateWithoutUserInput>
  }

  export type ReportsDistributionsCreateManyUserInputEnvelope = {
    data: ReportsDistributionsCreateManyUserInput | ReportsDistributionsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithWhereUniqueWithoutUserInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutUserInput, ClientUncheckedUpdateWithoutUserInput>
    create: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutUserInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutUserInput, ClientUncheckedUpdateWithoutUserInput>
  }

  export type ClientUpdateManyWithWhereWithoutUserInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutUserInput>
  }

  export type ClientScalarWhereInput = {
    AND?: ClientScalarWhereInput | ClientScalarWhereInput[]
    OR?: ClientScalarWhereInput[]
    NOT?: ClientScalarWhereInput | ClientScalarWhereInput[]
    id?: StringFilter<"Client"> | string
    socialName?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    phone?: StringFilter<"Client"> | string
    cnpj?: StringFilter<"Client"> | string
    user_created_id?: StringFilter<"Client"> | string
    created_at?: DateTimeFilter<"Client"> | Date | string
    updated_at?: DateTimeNullableFilter<"Client"> | Date | string | null
  }

  export type AuthorizationOfDistributionUpsertWithWhereUniqueWithoutUserInput = {
    where: AuthorizationOfDistributionWhereUniqueInput
    update: XOR<AuthorizationOfDistributionUpdateWithoutUserInput, AuthorizationOfDistributionUncheckedUpdateWithoutUserInput>
    create: XOR<AuthorizationOfDistributionCreateWithoutUserInput, AuthorizationOfDistributionUncheckedCreateWithoutUserInput>
  }

  export type AuthorizationOfDistributionUpdateWithWhereUniqueWithoutUserInput = {
    where: AuthorizationOfDistributionWhereUniqueInput
    data: XOR<AuthorizationOfDistributionUpdateWithoutUserInput, AuthorizationOfDistributionUncheckedUpdateWithoutUserInput>
  }

  export type AuthorizationOfDistributionUpdateManyWithWhereWithoutUserInput = {
    where: AuthorizationOfDistributionScalarWhereInput
    data: XOR<AuthorizationOfDistributionUpdateManyMutationInput, AuthorizationOfDistributionUncheckedUpdateManyWithoutUserInput>
  }

  export type AuthorizationOfDistributionScalarWhereInput = {
    AND?: AuthorizationOfDistributionScalarWhereInput | AuthorizationOfDistributionScalarWhereInput[]
    OR?: AuthorizationOfDistributionScalarWhereInput[]
    NOT?: AuthorizationOfDistributionScalarWhereInput | AuthorizationOfDistributionScalarWhereInput[]
    id?: StringFilter<"AuthorizationOfDistribution"> | string
    creation_user_id?: StringFilter<"AuthorizationOfDistribution"> | string
    client_id?: StringFilter<"AuthorizationOfDistribution"> | string
    created_at?: DateTimeFilter<"AuthorizationOfDistribution"> | Date | string
    value_of_thousand_in_cents?: IntFilter<"AuthorizationOfDistribution"> | number
  }

  export type AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutUserInput = {
    where: AuthorizationsHasSectorsWhereUniqueInput
    update: XOR<AuthorizationsHasSectorsUpdateWithoutUserInput, AuthorizationsHasSectorsUncheckedUpdateWithoutUserInput>
    create: XOR<AuthorizationsHasSectorsCreateWithoutUserInput, AuthorizationsHasSectorsUncheckedCreateWithoutUserInput>
  }

  export type AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutUserInput = {
    where: AuthorizationsHasSectorsWhereUniqueInput
    data: XOR<AuthorizationsHasSectorsUpdateWithoutUserInput, AuthorizationsHasSectorsUncheckedUpdateWithoutUserInput>
  }

  export type AuthorizationsHasSectorsUpdateManyWithWhereWithoutUserInput = {
    where: AuthorizationsHasSectorsScalarWhereInput
    data: XOR<AuthorizationsHasSectorsUpdateManyMutationInput, AuthorizationsHasSectorsUncheckedUpdateManyWithoutUserInput>
  }

  export type AuthorizationsHasSectorsScalarWhereInput = {
    AND?: AuthorizationsHasSectorsScalarWhereInput | AuthorizationsHasSectorsScalarWhereInput[]
    OR?: AuthorizationsHasSectorsScalarWhereInput[]
    NOT?: AuthorizationsHasSectorsScalarWhereInput | AuthorizationsHasSectorsScalarWhereInput[]
    id?: StringFilter<"AuthorizationsHasSectors"> | string
    sector_id?: StringFilter<"AuthorizationsHasSectors"> | string
    authorization_of_distribution_id?: StringFilter<"AuthorizationsHasSectors"> | string
    userId?: StringNullableFilter<"AuthorizationsHasSectors"> | string | null
  }

  export type ReportsDistributionsUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportsDistributionsWhereUniqueInput
    update: XOR<ReportsDistributionsUpdateWithoutUserInput, ReportsDistributionsUncheckedUpdateWithoutUserInput>
    create: XOR<ReportsDistributionsCreateWithoutUserInput, ReportsDistributionsUncheckedCreateWithoutUserInput>
  }

  export type ReportsDistributionsUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportsDistributionsWhereUniqueInput
    data: XOR<ReportsDistributionsUpdateWithoutUserInput, ReportsDistributionsUncheckedUpdateWithoutUserInput>
  }

  export type ReportsDistributionsUpdateManyWithWhereWithoutUserInput = {
    where: ReportsDistributionsScalarWhereInput
    data: XOR<ReportsDistributionsUpdateManyMutationInput, ReportsDistributionsUncheckedUpdateManyWithoutUserInput>
  }

  export type ReportsDistributionsScalarWhereInput = {
    AND?: ReportsDistributionsScalarWhereInput | ReportsDistributionsScalarWhereInput[]
    OR?: ReportsDistributionsScalarWhereInput[]
    NOT?: ReportsDistributionsScalarWhereInput | ReportsDistributionsScalarWhereInput[]
    id?: StringFilter<"ReportsDistributions"> | string
    created_at?: DateTimeFilter<"ReportsDistributions"> | Date | string
    first_photo_url?: StringFilter<"ReportsDistributions"> | string
    second_photo_url?: StringFilter<"ReportsDistributions"> | string
    third_photo_url?: StringFilter<"ReportsDistributions"> | string
    user_created_id?: StringFilter<"ReportsDistributions"> | string
    authorization_id?: StringFilter<"ReportsDistributions"> | string
  }

  export type UserCreateWithoutClientInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
    DistribuitionsAuthorizations?: AuthorizationOfDistributionCreateNestedManyWithoutUserInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsCreateNestedManyWithoutUserInput
    ReportsDistributions?: ReportsDistributionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutClientInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUncheckedCreateNestedManyWithoutUserInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutUserInput
    ReportsDistributions?: ReportsDistributionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutClientInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClientInput, UserUncheckedCreateWithoutClientInput>
  }

  export type AuthorizationOfDistributionCreateWithoutClientInput = {
    id?: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
    User: UserCreateNestedOneWithoutDistribuitionsAuthorizationsInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsCreateNestedManyWithoutAuthorizationsDistributionsInput
    ReportsDistributions?: ReportsDistributionsCreateNestedOneWithoutAuthorizationInput
  }

  export type AuthorizationOfDistributionUncheckedCreateWithoutClientInput = {
    id?: string
    creation_user_id: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutAuthorizationsDistributionsInput
    ReportsDistributions?: ReportsDistributionsUncheckedCreateNestedOneWithoutAuthorizationInput
  }

  export type AuthorizationOfDistributionCreateOrConnectWithoutClientInput = {
    where: AuthorizationOfDistributionWhereUniqueInput
    create: XOR<AuthorizationOfDistributionCreateWithoutClientInput, AuthorizationOfDistributionUncheckedCreateWithoutClientInput>
  }

  export type AuthorizationOfDistributionCreateManyClientInputEnvelope = {
    data: AuthorizationOfDistributionCreateManyClientInput | AuthorizationOfDistributionCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutClientInput = {
    update: XOR<UserUpdateWithoutClientInput, UserUncheckedUpdateWithoutClientInput>
    create: XOR<UserCreateWithoutClientInput, UserUncheckedCreateWithoutClientInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClientInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClientInput, UserUncheckedUpdateWithoutClientInput>
  }

  export type UserUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUpdateManyWithoutUserNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUpdateManyWithoutUserNestedInput
    ReportsDistributions?: ReportsDistributionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUncheckedUpdateManyWithoutUserNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedUpdateManyWithoutUserNestedInput
    ReportsDistributions?: ReportsDistributionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AuthorizationOfDistributionUpsertWithWhereUniqueWithoutClientInput = {
    where: AuthorizationOfDistributionWhereUniqueInput
    update: XOR<AuthorizationOfDistributionUpdateWithoutClientInput, AuthorizationOfDistributionUncheckedUpdateWithoutClientInput>
    create: XOR<AuthorizationOfDistributionCreateWithoutClientInput, AuthorizationOfDistributionUncheckedCreateWithoutClientInput>
  }

  export type AuthorizationOfDistributionUpdateWithWhereUniqueWithoutClientInput = {
    where: AuthorizationOfDistributionWhereUniqueInput
    data: XOR<AuthorizationOfDistributionUpdateWithoutClientInput, AuthorizationOfDistributionUncheckedUpdateWithoutClientInput>
  }

  export type AuthorizationOfDistributionUpdateManyWithWhereWithoutClientInput = {
    where: AuthorizationOfDistributionScalarWhereInput
    data: XOR<AuthorizationOfDistributionUpdateManyMutationInput, AuthorizationOfDistributionUncheckedUpdateManyWithoutClientInput>
  }

  export type UserCreateWithoutDistribuitionsAuthorizationsInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
    Client?: ClientCreateNestedManyWithoutUserInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsCreateNestedManyWithoutUserInput
    ReportsDistributions?: ReportsDistributionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDistribuitionsAuthorizationsInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
    Client?: ClientUncheckedCreateNestedManyWithoutUserInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutUserInput
    ReportsDistributions?: ReportsDistributionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDistribuitionsAuthorizationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDistribuitionsAuthorizationsInput, UserUncheckedCreateWithoutDistribuitionsAuthorizationsInput>
  }

  export type ClientCreateWithoutDistributionAuthorizationInput = {
    id?: string
    socialName: string
    email: string
    phone: string
    cnpj: string
    created_at?: Date | string
    updated_at?: Date | string | null
    User: UserCreateNestedOneWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutDistributionAuthorizationInput = {
    id?: string
    socialName: string
    email: string
    phone: string
    cnpj: string
    user_created_id: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ClientCreateOrConnectWithoutDistributionAuthorizationInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutDistributionAuthorizationInput, ClientUncheckedCreateWithoutDistributionAuthorizationInput>
  }

  export type AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput = {
    id?: string
    Sector: SectorCreateNestedOneWithoutAuthorizationsHasSectorsInput
    User?: UserCreateNestedOneWithoutAuthorizationsHasSectorsInput
  }

  export type AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput = {
    id?: string
    sector_id: string
    userId?: string | null
  }

  export type AuthorizationsHasSectorsCreateOrConnectWithoutAuthorizationsDistributionsInput = {
    where: AuthorizationsHasSectorsWhereUniqueInput
    create: XOR<AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput, AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput>
  }

  export type AuthorizationsHasSectorsCreateManyAuthorizationsDistributionsInputEnvelope = {
    data: AuthorizationsHasSectorsCreateManyAuthorizationsDistributionsInput | AuthorizationsHasSectorsCreateManyAuthorizationsDistributionsInput[]
    skipDuplicates?: boolean
  }

  export type ReportsDistributionsCreateWithoutAuthorizationInput = {
    id?: string
    created_at?: Date | string
    first_photo_url: string
    second_photo_url: string
    third_photo_url: string
    User: UserCreateNestedOneWithoutReportsDistributionsInput
  }

  export type ReportsDistributionsUncheckedCreateWithoutAuthorizationInput = {
    id?: string
    created_at?: Date | string
    first_photo_url: string
    second_photo_url: string
    third_photo_url: string
    user_created_id: string
  }

  export type ReportsDistributionsCreateOrConnectWithoutAuthorizationInput = {
    where: ReportsDistributionsWhereUniqueInput
    create: XOR<ReportsDistributionsCreateWithoutAuthorizationInput, ReportsDistributionsUncheckedCreateWithoutAuthorizationInput>
  }

  export type UserUpsertWithoutDistribuitionsAuthorizationsInput = {
    update: XOR<UserUpdateWithoutDistribuitionsAuthorizationsInput, UserUncheckedUpdateWithoutDistribuitionsAuthorizationsInput>
    create: XOR<UserCreateWithoutDistribuitionsAuthorizationsInput, UserUncheckedCreateWithoutDistribuitionsAuthorizationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDistribuitionsAuthorizationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDistribuitionsAuthorizationsInput, UserUncheckedUpdateWithoutDistribuitionsAuthorizationsInput>
  }

  export type UserUpdateWithoutDistribuitionsAuthorizationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    Client?: ClientUpdateManyWithoutUserNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUpdateManyWithoutUserNestedInput
    ReportsDistributions?: ReportsDistributionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDistribuitionsAuthorizationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    Client?: ClientUncheckedUpdateManyWithoutUserNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedUpdateManyWithoutUserNestedInput
    ReportsDistributions?: ReportsDistributionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClientUpsertWithoutDistributionAuthorizationInput = {
    update: XOR<ClientUpdateWithoutDistributionAuthorizationInput, ClientUncheckedUpdateWithoutDistributionAuthorizationInput>
    create: XOR<ClientCreateWithoutDistributionAuthorizationInput, ClientUncheckedCreateWithoutDistributionAuthorizationInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutDistributionAuthorizationInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutDistributionAuthorizationInput, ClientUncheckedUpdateWithoutDistributionAuthorizationInput>
  }

  export type ClientUpdateWithoutDistributionAuthorizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutDistributionAuthorizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    user_created_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutAuthorizationsDistributionsInput = {
    where: AuthorizationsHasSectorsWhereUniqueInput
    update: XOR<AuthorizationsHasSectorsUpdateWithoutAuthorizationsDistributionsInput, AuthorizationsHasSectorsUncheckedUpdateWithoutAuthorizationsDistributionsInput>
    create: XOR<AuthorizationsHasSectorsCreateWithoutAuthorizationsDistributionsInput, AuthorizationsHasSectorsUncheckedCreateWithoutAuthorizationsDistributionsInput>
  }

  export type AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutAuthorizationsDistributionsInput = {
    where: AuthorizationsHasSectorsWhereUniqueInput
    data: XOR<AuthorizationsHasSectorsUpdateWithoutAuthorizationsDistributionsInput, AuthorizationsHasSectorsUncheckedUpdateWithoutAuthorizationsDistributionsInput>
  }

  export type AuthorizationsHasSectorsUpdateManyWithWhereWithoutAuthorizationsDistributionsInput = {
    where: AuthorizationsHasSectorsScalarWhereInput
    data: XOR<AuthorizationsHasSectorsUpdateManyMutationInput, AuthorizationsHasSectorsUncheckedUpdateManyWithoutAuthorizationsDistributionsInput>
  }

  export type ReportsDistributionsUpsertWithoutAuthorizationInput = {
    update: XOR<ReportsDistributionsUpdateWithoutAuthorizationInput, ReportsDistributionsUncheckedUpdateWithoutAuthorizationInput>
    create: XOR<ReportsDistributionsCreateWithoutAuthorizationInput, ReportsDistributionsUncheckedCreateWithoutAuthorizationInput>
    where?: ReportsDistributionsWhereInput
  }

  export type ReportsDistributionsUpdateToOneWithWhereWithoutAuthorizationInput = {
    where?: ReportsDistributionsWhereInput
    data: XOR<ReportsDistributionsUpdateWithoutAuthorizationInput, ReportsDistributionsUncheckedUpdateWithoutAuthorizationInput>
  }

  export type ReportsDistributionsUpdateWithoutAuthorizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    first_photo_url?: StringFieldUpdateOperationsInput | string
    second_photo_url?: StringFieldUpdateOperationsInput | string
    third_photo_url?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutReportsDistributionsNestedInput
  }

  export type ReportsDistributionsUncheckedUpdateWithoutAuthorizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    first_photo_url?: StringFieldUpdateOperationsInput | string
    second_photo_url?: StringFieldUpdateOperationsInput | string
    third_photo_url?: StringFieldUpdateOperationsInput | string
    user_created_id?: StringFieldUpdateOperationsInput | string
  }

  export type AuthorizationOfDistributionCreateWithoutAuthorizationsHasSectorsInput = {
    id?: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
    User: UserCreateNestedOneWithoutDistribuitionsAuthorizationsInput
    Client: ClientCreateNestedOneWithoutDistributionAuthorizationInput
    ReportsDistributions?: ReportsDistributionsCreateNestedOneWithoutAuthorizationInput
  }

  export type AuthorizationOfDistributionUncheckedCreateWithoutAuthorizationsHasSectorsInput = {
    id?: string
    creation_user_id: string
    client_id: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
    ReportsDistributions?: ReportsDistributionsUncheckedCreateNestedOneWithoutAuthorizationInput
  }

  export type AuthorizationOfDistributionCreateOrConnectWithoutAuthorizationsHasSectorsInput = {
    where: AuthorizationOfDistributionWhereUniqueInput
    create: XOR<AuthorizationOfDistributionCreateWithoutAuthorizationsHasSectorsInput, AuthorizationOfDistributionUncheckedCreateWithoutAuthorizationsHasSectorsInput>
  }

  export type SectorCreateWithoutAuthorizationsHasSectorsInput = {
    id?: string
    name: string
  }

  export type SectorUncheckedCreateWithoutAuthorizationsHasSectorsInput = {
    id?: string
    name: string
  }

  export type SectorCreateOrConnectWithoutAuthorizationsHasSectorsInput = {
    where: SectorWhereUniqueInput
    create: XOR<SectorCreateWithoutAuthorizationsHasSectorsInput, SectorUncheckedCreateWithoutAuthorizationsHasSectorsInput>
  }

  export type UserCreateWithoutAuthorizationsHasSectorsInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
    Client?: ClientCreateNestedManyWithoutUserInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionCreateNestedManyWithoutUserInput
    ReportsDistributions?: ReportsDistributionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuthorizationsHasSectorsInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
    Client?: ClientUncheckedCreateNestedManyWithoutUserInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUncheckedCreateNestedManyWithoutUserInput
    ReportsDistributions?: ReportsDistributionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuthorizationsHasSectorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuthorizationsHasSectorsInput, UserUncheckedCreateWithoutAuthorizationsHasSectorsInput>
  }

  export type AuthorizationOfDistributionUpsertWithoutAuthorizationsHasSectorsInput = {
    update: XOR<AuthorizationOfDistributionUpdateWithoutAuthorizationsHasSectorsInput, AuthorizationOfDistributionUncheckedUpdateWithoutAuthorizationsHasSectorsInput>
    create: XOR<AuthorizationOfDistributionCreateWithoutAuthorizationsHasSectorsInput, AuthorizationOfDistributionUncheckedCreateWithoutAuthorizationsHasSectorsInput>
    where?: AuthorizationOfDistributionWhereInput
  }

  export type AuthorizationOfDistributionUpdateToOneWithWhereWithoutAuthorizationsHasSectorsInput = {
    where?: AuthorizationOfDistributionWhereInput
    data: XOR<AuthorizationOfDistributionUpdateWithoutAuthorizationsHasSectorsInput, AuthorizationOfDistributionUncheckedUpdateWithoutAuthorizationsHasSectorsInput>
  }

  export type AuthorizationOfDistributionUpdateWithoutAuthorizationsHasSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutDistribuitionsAuthorizationsNestedInput
    Client?: ClientUpdateOneRequiredWithoutDistributionAuthorizationNestedInput
    ReportsDistributions?: ReportsDistributionsUpdateOneWithoutAuthorizationNestedInput
  }

  export type AuthorizationOfDistributionUncheckedUpdateWithoutAuthorizationsHasSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    creation_user_id?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
    ReportsDistributions?: ReportsDistributionsUncheckedUpdateOneWithoutAuthorizationNestedInput
  }

  export type SectorUpsertWithoutAuthorizationsHasSectorsInput = {
    update: XOR<SectorUpdateWithoutAuthorizationsHasSectorsInput, SectorUncheckedUpdateWithoutAuthorizationsHasSectorsInput>
    create: XOR<SectorCreateWithoutAuthorizationsHasSectorsInput, SectorUncheckedCreateWithoutAuthorizationsHasSectorsInput>
    where?: SectorWhereInput
  }

  export type SectorUpdateToOneWithWhereWithoutAuthorizationsHasSectorsInput = {
    where?: SectorWhereInput
    data: XOR<SectorUpdateWithoutAuthorizationsHasSectorsInput, SectorUncheckedUpdateWithoutAuthorizationsHasSectorsInput>
  }

  export type SectorUpdateWithoutAuthorizationsHasSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectorUncheckedUpdateWithoutAuthorizationsHasSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutAuthorizationsHasSectorsInput = {
    update: XOR<UserUpdateWithoutAuthorizationsHasSectorsInput, UserUncheckedUpdateWithoutAuthorizationsHasSectorsInput>
    create: XOR<UserCreateWithoutAuthorizationsHasSectorsInput, UserUncheckedCreateWithoutAuthorizationsHasSectorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuthorizationsHasSectorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuthorizationsHasSectorsInput, UserUncheckedUpdateWithoutAuthorizationsHasSectorsInput>
  }

  export type UserUpdateWithoutAuthorizationsHasSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    Client?: ClientUpdateManyWithoutUserNestedInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUpdateManyWithoutUserNestedInput
    ReportsDistributions?: ReportsDistributionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuthorizationsHasSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    Client?: ClientUncheckedUpdateManyWithoutUserNestedInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUncheckedUpdateManyWithoutUserNestedInput
    ReportsDistributions?: ReportsDistributionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutReportsDistributionsInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
    Client?: ClientCreateNestedManyWithoutUserInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionCreateNestedManyWithoutUserInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReportsDistributionsInput = {
    id?: string
    name: string
    cpf_number: string
    work_card_number: string
    office: string
    email: string
    password_hash: string
    created_at?: Date | string
    updated_at?: Date | string | null
    role?: $Enums.Role
    Client?: ClientUncheckedCreateNestedManyWithoutUserInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUncheckedCreateNestedManyWithoutUserInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReportsDistributionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsDistributionsInput, UserUncheckedCreateWithoutReportsDistributionsInput>
  }

  export type AuthorizationOfDistributionCreateWithoutReportsDistributionsInput = {
    id?: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
    User: UserCreateNestedOneWithoutDistribuitionsAuthorizationsInput
    Client: ClientCreateNestedOneWithoutDistributionAuthorizationInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsCreateNestedManyWithoutAuthorizationsDistributionsInput
  }

  export type AuthorizationOfDistributionUncheckedCreateWithoutReportsDistributionsInput = {
    id?: string
    creation_user_id: string
    client_id: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedCreateNestedManyWithoutAuthorizationsDistributionsInput
  }

  export type AuthorizationOfDistributionCreateOrConnectWithoutReportsDistributionsInput = {
    where: AuthorizationOfDistributionWhereUniqueInput
    create: XOR<AuthorizationOfDistributionCreateWithoutReportsDistributionsInput, AuthorizationOfDistributionUncheckedCreateWithoutReportsDistributionsInput>
  }

  export type UserUpsertWithoutReportsDistributionsInput = {
    update: XOR<UserUpdateWithoutReportsDistributionsInput, UserUncheckedUpdateWithoutReportsDistributionsInput>
    create: XOR<UserCreateWithoutReportsDistributionsInput, UserUncheckedCreateWithoutReportsDistributionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsDistributionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsDistributionsInput, UserUncheckedUpdateWithoutReportsDistributionsInput>
  }

  export type UserUpdateWithoutReportsDistributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    Client?: ClientUpdateManyWithoutUserNestedInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUpdateManyWithoutUserNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsDistributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf_number?: StringFieldUpdateOperationsInput | string
    work_card_number?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    Client?: ClientUncheckedUpdateManyWithoutUserNestedInput
    DistribuitionsAuthorizations?: AuthorizationOfDistributionUncheckedUpdateManyWithoutUserNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AuthorizationOfDistributionUpsertWithoutReportsDistributionsInput = {
    update: XOR<AuthorizationOfDistributionUpdateWithoutReportsDistributionsInput, AuthorizationOfDistributionUncheckedUpdateWithoutReportsDistributionsInput>
    create: XOR<AuthorizationOfDistributionCreateWithoutReportsDistributionsInput, AuthorizationOfDistributionUncheckedCreateWithoutReportsDistributionsInput>
    where?: AuthorizationOfDistributionWhereInput
  }

  export type AuthorizationOfDistributionUpdateToOneWithWhereWithoutReportsDistributionsInput = {
    where?: AuthorizationOfDistributionWhereInput
    data: XOR<AuthorizationOfDistributionUpdateWithoutReportsDistributionsInput, AuthorizationOfDistributionUncheckedUpdateWithoutReportsDistributionsInput>
  }

  export type AuthorizationOfDistributionUpdateWithoutReportsDistributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutDistribuitionsAuthorizationsNestedInput
    Client?: ClientUpdateOneRequiredWithoutDistributionAuthorizationNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUpdateManyWithoutAuthorizationsDistributionsNestedInput
  }

  export type AuthorizationOfDistributionUncheckedUpdateWithoutReportsDistributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    creation_user_id?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedUpdateManyWithoutAuthorizationsDistributionsNestedInput
  }

  export type AuthorizationsHasSectorsCreateWithoutSectorInput = {
    id?: string
    AuthorizationsDistributions: AuthorizationOfDistributionCreateNestedOneWithoutAuthorizationsHasSectorsInput
    User?: UserCreateNestedOneWithoutAuthorizationsHasSectorsInput
  }

  export type AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput = {
    id?: string
    authorization_of_distribution_id: string
    userId?: string | null
  }

  export type AuthorizationsHasSectorsCreateOrConnectWithoutSectorInput = {
    where: AuthorizationsHasSectorsWhereUniqueInput
    create: XOR<AuthorizationsHasSectorsCreateWithoutSectorInput, AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput>
  }

  export type AuthorizationsHasSectorsCreateManySectorInputEnvelope = {
    data: AuthorizationsHasSectorsCreateManySectorInput | AuthorizationsHasSectorsCreateManySectorInput[]
    skipDuplicates?: boolean
  }

  export type AuthorizationsHasSectorsUpsertWithWhereUniqueWithoutSectorInput = {
    where: AuthorizationsHasSectorsWhereUniqueInput
    update: XOR<AuthorizationsHasSectorsUpdateWithoutSectorInput, AuthorizationsHasSectorsUncheckedUpdateWithoutSectorInput>
    create: XOR<AuthorizationsHasSectorsCreateWithoutSectorInput, AuthorizationsHasSectorsUncheckedCreateWithoutSectorInput>
  }

  export type AuthorizationsHasSectorsUpdateWithWhereUniqueWithoutSectorInput = {
    where: AuthorizationsHasSectorsWhereUniqueInput
    data: XOR<AuthorizationsHasSectorsUpdateWithoutSectorInput, AuthorizationsHasSectorsUncheckedUpdateWithoutSectorInput>
  }

  export type AuthorizationsHasSectorsUpdateManyWithWhereWithoutSectorInput = {
    where: AuthorizationsHasSectorsScalarWhereInput
    data: XOR<AuthorizationsHasSectorsUpdateManyMutationInput, AuthorizationsHasSectorsUncheckedUpdateManyWithoutSectorInput>
  }

  export type ClientCreateManyUserInput = {
    id?: string
    socialName: string
    email: string
    phone: string
    cnpj: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type AuthorizationOfDistributionCreateManyUserInput = {
    id?: string
    client_id: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
  }

  export type AuthorizationsHasSectorsCreateManyUserInput = {
    id?: string
    sector_id: string
    authorization_of_distribution_id: string
  }

  export type ReportsDistributionsCreateManyUserInput = {
    id?: string
    created_at?: Date | string
    first_photo_url: string
    second_photo_url: string
    third_photo_url: string
    authorization_id: string
  }

  export type ClientUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DistributionAuthorization?: AuthorizationOfDistributionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DistributionAuthorization?: AuthorizationOfDistributionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthorizationOfDistributionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
    Client?: ClientUpdateOneRequiredWithoutDistributionAuthorizationNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUpdateManyWithoutAuthorizationsDistributionsNestedInput
    ReportsDistributions?: ReportsDistributionsUpdateOneWithoutAuthorizationNestedInput
  }

  export type AuthorizationOfDistributionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedUpdateManyWithoutAuthorizationsDistributionsNestedInput
    ReportsDistributions?: ReportsDistributionsUncheckedUpdateOneWithoutAuthorizationNestedInput
  }

  export type AuthorizationOfDistributionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
  }

  export type AuthorizationsHasSectorsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    AuthorizationsDistributions?: AuthorizationOfDistributionUpdateOneRequiredWithoutAuthorizationsHasSectorsNestedInput
    Sector?: SectorUpdateOneRequiredWithoutAuthorizationsHasSectorsNestedInput
  }

  export type AuthorizationsHasSectorsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sector_id?: StringFieldUpdateOperationsInput | string
    authorization_of_distribution_id?: StringFieldUpdateOperationsInput | string
  }

  export type AuthorizationsHasSectorsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sector_id?: StringFieldUpdateOperationsInput | string
    authorization_of_distribution_id?: StringFieldUpdateOperationsInput | string
  }

  export type ReportsDistributionsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    first_photo_url?: StringFieldUpdateOperationsInput | string
    second_photo_url?: StringFieldUpdateOperationsInput | string
    third_photo_url?: StringFieldUpdateOperationsInput | string
    Authorization?: AuthorizationOfDistributionUpdateOneRequiredWithoutReportsDistributionsNestedInput
  }

  export type ReportsDistributionsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    first_photo_url?: StringFieldUpdateOperationsInput | string
    second_photo_url?: StringFieldUpdateOperationsInput | string
    third_photo_url?: StringFieldUpdateOperationsInput | string
    authorization_id?: StringFieldUpdateOperationsInput | string
  }

  export type ReportsDistributionsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    first_photo_url?: StringFieldUpdateOperationsInput | string
    second_photo_url?: StringFieldUpdateOperationsInput | string
    third_photo_url?: StringFieldUpdateOperationsInput | string
    authorization_id?: StringFieldUpdateOperationsInput | string
  }

  export type AuthorizationOfDistributionCreateManyClientInput = {
    id?: string
    creation_user_id: string
    created_at?: Date | string
    value_of_thousand_in_cents: number
  }

  export type AuthorizationOfDistributionUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutDistribuitionsAuthorizationsNestedInput
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUpdateManyWithoutAuthorizationsDistributionsNestedInput
    ReportsDistributions?: ReportsDistributionsUpdateOneWithoutAuthorizationNestedInput
  }

  export type AuthorizationOfDistributionUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    creation_user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
    AuthorizationsHasSectors?: AuthorizationsHasSectorsUncheckedUpdateManyWithoutAuthorizationsDistributionsNestedInput
    ReportsDistributions?: ReportsDistributionsUncheckedUpdateOneWithoutAuthorizationNestedInput
  }

  export type AuthorizationOfDistributionUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    creation_user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value_of_thousand_in_cents?: IntFieldUpdateOperationsInput | number
  }

  export type AuthorizationsHasSectorsCreateManyAuthorizationsDistributionsInput = {
    id?: string
    sector_id: string
    userId?: string | null
  }

  export type AuthorizationsHasSectorsUpdateWithoutAuthorizationsDistributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    Sector?: SectorUpdateOneRequiredWithoutAuthorizationsHasSectorsNestedInput
    User?: UserUpdateOneWithoutAuthorizationsHasSectorsNestedInput
  }

  export type AuthorizationsHasSectorsUncheckedUpdateWithoutAuthorizationsDistributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sector_id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthorizationsHasSectorsUncheckedUpdateManyWithoutAuthorizationsDistributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sector_id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthorizationsHasSectorsCreateManySectorInput = {
    id?: string
    authorization_of_distribution_id: string
    userId?: string | null
  }

  export type AuthorizationsHasSectorsUpdateWithoutSectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    AuthorizationsDistributions?: AuthorizationOfDistributionUpdateOneRequiredWithoutAuthorizationsHasSectorsNestedInput
    User?: UserUpdateOneWithoutAuthorizationsHasSectorsNestedInput
  }

  export type AuthorizationsHasSectorsUncheckedUpdateWithoutSectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorization_of_distribution_id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthorizationsHasSectorsUncheckedUpdateManyWithoutSectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorization_of_distribution_id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientCountOutputTypeDefaultArgs instead
     */
    export type ClientCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ClientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuthorizationOfDistributionCountOutputTypeDefaultArgs instead
     */
    export type AuthorizationOfDistributionCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AuthorizationOfDistributionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SectorCountOutputTypeDefaultArgs instead
     */
    export type SectorCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SectorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientDefaultArgs instead
     */
    export type ClientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ClientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuthorizationOfDistributionDefaultArgs instead
     */
    export type AuthorizationOfDistributionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AuthorizationOfDistributionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuthorizationsHasSectorsDefaultArgs instead
     */
    export type AuthorizationsHasSectorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AuthorizationsHasSectorsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportsDistributionsDefaultArgs instead
     */
    export type ReportsDistributionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ReportsDistributionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SectorDefaultArgs instead
     */
    export type SectorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SectorDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}